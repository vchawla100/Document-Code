	
			
	BEGIN
		IF EXISTS(SELECT 1 FROM SYSObjects WITH(NOLOCK) WHERE NAME = 'WFHEALTH_INDEXLIST')
		BEGIN
			EXECUTE ('DROP TABLE WFHEALTH_INDEXLIST')
		END
			EXECUTE ('CREATE TABLE WFHEALTH_INDEXLIST(TABLE_NAME nvarchar(128),INDEX_COLUMNS nvarchar(256),INDEX_TYPE nvarchar(128))')
			PRINT ('WFHEALTH_INDEXLIST Table Created')
	END
	BEGIN
		BEGIN TRY
		IF EXISTS(SELECT 1 FROM SYSObjects WITH(NOLOCK) WHERE NAME = 'WFHEALTHIDENTITYCOLUMNTABLE')
		BEGIN
			EXECUTE ('DROP TABLE WFHEALTHIDENTITYCOLUMNTABLE')
		END
			EXECUTE('CREATE TABLE WFHEALTHIDENTITYCOLUMNTABLE(ENTITY_TYPE int,SUB_ENTITY_TYPE int,TABLE_NAME nvarchar(512),COLUMN_NAME nvarchar(512),DATATYPE nvarchar(512),LIMIT BIGINT,CURRENTVALUE BIGINT,OCCUPANCY DECIMAL(25, 7),RISKCATEGORY INTEGER)')
						
			PRINT ('WFHEALTHIDENTITYCOLUMNTABLE Table Created')
		END TRY
		BEGIN CATCH
			RAISERROR('CREATION OF WFHEALTHIDENTITYCOLUMNTABLE HAS FAILED',16,1)
		END CATCH
	END
	GO
GO
BEGIN
		If Exists (Select * from SysObjects WITH(NOLOCK) Where xType = 'P' and name = 'WFCOLUMNRETURN')
		BEGIN
			EXECUTE ('DROP PROCEDURE WFCOLUMNRETURN')
		END
	END
	GO
	CREATE PROCEDURE WFCOLUMNRETURN (@FILTER NVARCHAR(MAX), @SUBOUT1 NVARCHAR(2024) OUT, @SUBOUT2 NVARCHAR(2024) OUT)
	AS
	SET NOCOUNT ON
	DECLARE @COL1 NVARCHAR(128)
	DECLARE @COL2 NVARCHAR(10)
	DECLARE @COL3 INTEGER
	DECLARE @COL_INDEX INTEGER
	DECLARE @QUERY NVARCHAR(512)
	DECLARE @PARAMDEFINITION NVARCHAR(500)
	DECLARE @SUB1 NVARCHAR(MAX)
	DECLARE @SUB2 NVARCHAR(MAX)
	DECLARE @FLAG1 INTEGER
	DECLARE @FLAG2 INTEGER
	BEGIN
	SET @FLAG1 = 0
	SET @FLAG2 = 0
	BEGIN
		IF EXISTS(SELECT 1 FROM SYSObjects WITH(NOLOCK) WHERE NAME = '#WFHFILTABLE')
		BEGIN
			EXECUTE ('DROP TABLE #WFHFILTABLE')
		END
	END
		CREATE TABLE #WFHFILTABLE(COLUMN_NAME nvarchar(128),IS_ALLOWED nvarchar(10),COL_INDEX INTEGER)
		BEGIN TRY
			DECLARE C_CURSOR CURSOR FOR SELECT COLUMN_NAME, ISALLOWED FROM ##TEMPWFPRODCOLUMN WITH(NOLOCK)
			OPEN C_CURSOR
			FETCH NEXT FROM C_CURSOR INTO @COL1, @COL2
			WHILE(@@FETCH_STATUS = 0)
			BEGIN
				SET @COL_INDEX = DBO.CHKEXTVARPRESENTANDRETURN(@COL1, @FILTER)
				IF(@COL_INDEX > 0)
				BEGIN
					INSERT INTO #WFHFILTABLE(COLUMN_NAME, IS_ALLOWED, COL_INDEX) VALUES(@COL1, @COL2, @COL_INDEX)
				END
				FETCH NEXT FROM C_CURSOR INTO @COL1, @COL2
			END
			CLOSE C_CURSOR
			DEALLOCATE C_CURSOR
		END TRY
		BEGIN CATCH
				IF(CURSOR_STATUS('GLOBAL', 'C_CURSOR') >= -1)
				BEGIN
					IF(CURSOR_STATUS('GLOBAL', 'C_CURSOR') > -1)
					BEGIN
						CLOSE C_CURSOR
					END
					DEALLOCATE C_CURSOR
				END
		END CATCH
		DECLARE V_CURSOR CURSOR FOR SELECT COLUMN_NAME, IS_ALLOWED, COL_INDEX FROM #WFHFILTABLE WITH(NOLOCK) ORDER BY COL_INDEX
		BEGIN TRY
			OPEN V_CURSOR
			FETCH NEXT FROM V_CURSOR INTO @COL1, @COL2, @COL3
			WHILE(@@FETCH_STATUS = 0)
			BEGIN
				IF(@COL2 = 'Y')
				BEGIN
					IF(@FLAG1 = 0)
					BEGIN
						SET @SUBOUT1 = @COL1
						SET @FLAG1 = 1
					END 
					ELSE
					BEGIN
						SELECT @SUBOUT1 = @SUBOUT1 + ':' + @COL1
					END
				END
				ELSE
				BEGIN
					IF(@FLAG2 = 0)
					BEGIN
						SET @SUBOUT2 = @COL1
						SET @FLAG2 = 1
					END 
					ELSE
					BEGIN
						SELECT @SUBOUT2 = @SUBOUT2 + ':' + @COL1
					END
				END
				FETCH NEXT FROM V_CURSOR INTO @COL1, @COL2, @COL3
			END
			CLOSE V_CURSOR
			DEALLOCATE V_CURSOR
			--TRUNCATE TABLE WFHFILTABLE
		END TRY
		BEGIN CATCH
				IF(CURSOR_STATUS('GLOBAL', 'V_CURSOR') >= -1)
				BEGIN
					IF(CURSOR_STATUS('GLOBAL', 'V_CURSOR') > -1)
					BEGIN
						CLOSE V_CURSOR
					END
					DEALLOCATE V_CURSOR
				END
		END CATCH
		
	END
	GO
	BEGIN
		If Exists (Select * from SysObjects WITH(NOLOCK) Where xType = 'P' and name = 'INSERTWFHEALTHIDENTITYCOLUMN')
		BEGIN
			EXECUTE ('DROP PROCEDURE INSERTWFHEALTHIDENTITYCOLUMN')
		END
	END
	GO
	
	CREATE PROCEDURE INSERTWFHEALTHIDENTITYCOLUMN
	(
		@ENTITY_TYPE INT,
		@SUB_ENTITY_TYPE INT,
		@TABLE_NAME NVARCHAR(128),
		@COLUMN_NAME NVARCHAR(128),
		@DATATYPE NVARCHAR(128),
		@LIMIT BIGINT,
		@CURRENTVALUE BIGINT,
		@OCCUPANCY DECIMAL(25, 8),
		@RISKCATEGORY INTEGER
	)
	AS
	BEGIN
		BEGIN TRY
			--PRINT('@OCCUPANCY : '+CAST(@OCCUPANCY AS NVARCHAR))
			/*EXECUTE ('INSERT INTO WFHEALTHIDENTITYCOLUMNTABLE(ENTITY_TYPE,SUB_ENTITY_TYPE,TABLE_NAME,COLUMN_NAME,DATATYPE,LIMIT, CURRENTVALUE,OCCUPANCY,RISKCATEGORY) VALUES(' +@ENTITY_TYPE+','+@SUB_ENTITY_TYPE+','''+@TABLE_NAME+','''+@COLUMN_NAME+','''+@DATATYPE+','+@LIMIT+','+@CURRENTVALUE+','+@OCCUPANCY+','+@RISKCATEGORY+')')*/
			INSERT INTO WFHEALTHIDENTITYCOLUMNTABLE(ENTITY_TYPE,SUB_ENTITY_TYPE,TABLE_NAME,COLUMN_NAME,DATATYPE,LIMIT, CURRENTVALUE,OCCUPANCY,RISKCATEGORY) VALUES( @ENTITY_TYPE,@SUB_ENTITY_TYPE,@TABLE_NAME,@COLUMN_NAME,@DATATYPE,@LIMIT,@CURRENTVALUE,@OCCUPANCY,@RISKCATEGORY)
		END TRY
		BEGIN CATCH
			PRINT(ERROR_MESSAGE())
			RAISERROR('INSERTWFHEALTHIDENTITYCOLUMN PROCEDURE THROWING THE EXCEPTION',16,1)
		END CATCH
	END
	GO	
	BEGIN
		BEGIN TRY
		IF EXISTS(SELECT 1 FROM SYSObjects WITH(NOLOCK) WHERE NAME = 'WFHEALTHSTOREIDENTITY')
		BEGIN
			EXECUTE ('DROP TABLE WFHEALTHSTOREIDENTITY')
		END
		EXECUTE('CREATE TABLE WFHEALTHSTOREIDENTITY(TABLE_NAME nvarchar(128),COLUMN_NAME NVARCHAR(128))')
		PRINT ('WFHEALTHSTOREIDENTITY Table Created')
		END TRY
		BEGIN CATCH
			RAISERROR('CREATION OF WFHEALTHSTOREIDENTITY HAS FAILED',16,1)
		END CATCH
	END
	GO
	BEGIN
		BEGIN TRY
		IF EXISTS(SELECT 1 FROM SYSObjects WITH(NOLOCK) WHERE NAME = 'WFHEALTHCHECKUPTABLE')
		BEGIN
			EXECUTE ('DROP TABLE WFHEALTHCHECKUPTABLE')
		END
		EXECUTE('CREATE TABLE WFHEALTHCHECKUPTABLE(SNO int IDENTITY(1,1),ENTITY_TYPE int,SUB_ENTITY_TYPE int,PROCESS_NAME nvarchar(512),ACTIVITY_NAME nvarchar(512),QUEUE_NAME nvarchar(512),FIELD_1 nvarchar(2024),FIELD_2 nvarchar(2024),FIELD_3 nvarchar(2024),FIELD_4 nvarchar(2024) ,FIELD_5 nvarchar(2024),DESCRIPTION nvarchar(2024),TIMESTAMP datetime,SEVERITY int,OBSERVATION nvarchar(2024),IMPACT nvarchar(2024),RECOMMENDATION nvarchar(2024))')
							
		PRINT ('WFHEALTHCHECKUPTABLE Table Created')
		END TRY
		BEGIN CATCH
			RAISERROR('CREATION OF WFHEALTHCHECKUPTABLE HAS FAILED',16,1)
		END CATCH
	END
	GO
	BEGIN
		BEGIN TRY
		IF EXISTS(SELECT 1 FROM SYSObjects WITH(NOLOCK) WHERE NAME = 'WFHEALTHLOGTABLE')
		BEGIN
			EXECUTE('DROP TABLE WFHEALTHLOGTABLE')
		END
		EXECUTE ('CREATE TABLE WFHEALTHLOGTABLE(STEPNUMBER INT NOT NULL,
							SCRIPTNAME nvarchar(100) NOT NULL,
							STEPDETAILS nvarchar(1000),
							STATUS nvarchar(20))')
							
		PRINT 'WFHEALTHLOGTABLE Table Created'
		END TRY
		BEGIN CATCH
			RAISERROR('CREATION OF WFHEALTHLOGTABLE HAS FAILED',16,1)
		END CATCH
	END
	GO
	BEGIN
		If Exists (Select * from SysObjects WITH(NOLOCK) Where xType = 'P' and name = 'LogInsertCab')
		BEGIN
			EXECUTE ('DROP PROCEDURE LogInsertCab')
		END
	END
	GO
	CREATE PROCEDURE LogInsertCab
	(
		@v_stepNumber int,
		@v_scriptName varchar(100),
		@v_stepDetails varchar(4000),
		@v_status varchar(100)
	)
	AS
	BEGIN
		DECLARE @DBString  NVARCHAR(10) 
		DECLARE @dbQuery varchar(1000)
		
		BEGIN
			BEGIN
			--SELECT @DBString = 1
			
			--PRINT''@v_stepNumber--->''+@v_stepNumber
			--PRINT''@@v_stepDetails--->''+@v_stepDetails
		
			
			EXECUTE ('INSERT INTO WFHEALTHLOGTABLE(STEPNUMBER,SCRIPTNAME,STEPDETAILS, STATUS) VALUES
				(' + @v_stepNumber+','''+@v_scriptName+''','''+ @v_stepDetails +''','''+ @v_status +''')')
			--IF @@ROWCOUNT = 1
			--	return @DBString
			END
		END
		--Print 'Procedure LogInsertCab created..... '
	End
	GO
	BEGIN
		If Exists (Select * from SysObjects WITH(NOLOCK) Where xType = 'P' and name = 'CHECKCOLUMNEXIST')
		BEGIN
			EXECUTE ('DROP PROCEDURE CHECKCOLUMNEXIST')
		END
	END
	GO
		
	CREATE PROCEDURE CHECKCOLUMNEXIST(
		@TABLENAME NVARCHAR(256),
		@COLUMNNAME NVARCHAR(MAX),
		@FLAG INT OUT
	)
	AS
	BEGIN

		DECLARE @FIRST INT
		DECLARE @INDEXCOLON INT
		DECLARE @TEMPCOLUMN NVARCHAR(256)
		DECLARE @TEMP INT
		DECLARE @TEMP2 INT
		DECLARE @CHECKFLAG INT
		DECLARE @LENGTH INT
		DECLARE @CHECKFLAG1 INT

		SET @INDEXCOLON = 0
		SET @FIRST = 0
		SET @FLAG = 0
		SET @TEMP = 0
		SET @TEMP2 = 0
		SET @CHECKFLAG = 0
		SET @CHECKFLAG1 = 0
		
		BEGIN TRY
			BEGIN
				IF NOT EXISTS(SELECT 1 FROM SYSObjects WITH(NOLOCK) WHERE NAME = @TABLENAME)
				BEGIN
					SET @FLAG = 1
					RETURN
				END
			END
			
			SELECT @INDEXCOLON = CHARINDEX(':',@COLUMNNAME)
			SELECT @LENGTH = LEN(@COLUMNNAME)
			SET @TEMP = @INDEXCOLON
			SET @TEMP2 = @INDEXCOLON
			--PRINT('@INDEXCOLON :'+CAST(@INDEXCOLON AS NVARCHAR))
			IF(@INDEXCOLON > 0)
			BEGIN
				WHILE(@CHECKFLAG = 0)
				BEGIN
					SET @TEMPCOLUMN = ''
					--PRINT('@TEMP ' +CAST(@TEMP AS NVARCHAR))
					
					SELECT @TEMPCOLUMN = SUBSTRING(@COLUMNNAME,@FIRST,@TEMP2)
					--PRINT('@TEMPCOLUMN ' +@TEMPCOLUMN)
					IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WITH(NOLOCK) WHERE  TABLE_NAME = @TABLENAME AND COLUMN_NAME = @TEMPCOLUMN)
					BEGIN
						SET @FLAG = 1;
						RETURN
					END
					IF(@CHECKFLAG1 = 1)
					BEGIN
						RETURN
					END
					SET @FIRST = @TEMP + 1;
					SELECT @TEMP = CHARINDEX(':',@COLUMNNAME,@FIRST)
					IF(@TEMP = 0)
					BEGIN
						SET @TEMP2 = @LENGTH - @FIRST + 1
						SET @CHECKFLAG1 = 1
					END
					ELSE
					BEGIN
						SET @TEMP2 = @TEMP - @FIRST 
					END
				END
			END
			ELSE
			BEGIN
				--PRINT('IN ELSE ')
				IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WITH(NOLOCK) WHERE  TABLE_NAME = @TABLENAME AND COLUMN_NAME = @COLUMNNAME) 
				BEGIN
					SET @FLAG = 1
					RETURN
				END
			END
		END TRY
		BEGIN CATCH
			RAISERROR('CHECKCOLUMNEXIST PROCEDURE HAS THROW SOME ERROR',16,1)
		END CATCH
		
	END
	GO
	BEGIN
		If Exists (Select * from SysObjects WITH(NOLOCK) Where xType = 'P' and name = 'INSERTWFHEALTHCHECKUP')
		BEGIN
			EXECUTE ('DROP PROCEDURE INSERTWFHEALTHCHECKUP')
		END
	END
		go
	BEGIN
		BEGIN
		If Exists (Select * from SysObjects WITH(NOLOCK) Where xType = 'P' and name = 'CHECKINDEXONORDERCOLUMN')
		BEGIN
			EXECUTE ('DROP PROCEDURE CHECKINDEXONORDERCOLUMN')
		END
		END
	END
	GO
		
	BEGIN
		BEGIN
		If Exists (Select * from SysObjects WITH(NOLOCK) Where xType = 'P' and name = 'CHECKINDEXONORDERCOLUMN')
		BEGIN
			EXECUTE ('DROP PROCEDURE CHECKINDEXONORDERCOLUMN')
		END
		END
	END
	GO
	CREATE PROCEDURE CHECKINDEXONORDERCOLUMN
	( 
		@TABLENAME NVARCHAR(MAX),
		@COLUMNNAME NVARCHAR(MAX),
		@OUTFLAG INT OUT
	)
	AS 
	BEGIN
		BEGIN TRY
			DECLARE @C_INDEXNAME2 CURSOR 
			DECLARE @C_INDEXNAME NVARCHAR(MAX)
			DECLARE @C_COLNAME1 NVARCHAR(MAX)
			DECLARE @C_COLNAME2 NVARCHAR(MAX)
			DECLARE @C_CHECKCOLUMNEXISTENCE INT
			DECLARE @FLAG INT
			DECLARE @C_CHECKHYPHEN INT
			DECLARE @C_VALUE INT
			
			SET @OUTFLAG = 0
			SET @C_INDEXNAME2 = CURSOR FORWARD_ONLY STATIC FOR
				SELECT 
		IND.[NAME] AS INDEXNAME,
		UPPER(SUBSTRING(( SELECT ':' + AC.NAME
		FROM SYS.[TABLES] AS T WITH(NOLOCK)
		INNER JOIN SYS.[INDEXES] I WITH(NOLOCK)
		ON T.[OBJECT_ID] = I.[OBJECT_ID]
		INNER JOIN SYS.[INDEX_COLUMNS] IC WITH(NOLOCK)
		ON I.[OBJECT_ID] = IC.[OBJECT_ID]
		AND I.[INDEX_ID] = IC.[INDEX_ID]
		INNER JOIN SYS.[ALL_COLUMNS] AC WITH(NOLOCK)
		ON T.[OBJECT_ID] = AC.[OBJECT_ID]
		AND IC.[COLUMN_ID] = AC.[COLUMN_ID]
		WHERE IND.[OBJECT_ID] = I.[OBJECT_ID]
		AND IND.INDEX_ID = I.INDEX_ID
		AND IC.IS_INCLUDED_COLUMN = 0

		ORDER BY IC.KEY_ORDINAL
		FOR
		XML PATH('')

		), 2, 8000)) AS KEYCOLS
		FROM SYS.[INDEXES] IND WITH(NOLOCK)
		INNER JOIN SYS.[TABLES] AS TAB WITH(NOLOCK)
		ON TAB.[OBJECT_ID] = IND.[OBJECT_ID]
		INNER JOIN SYS.[SCHEMAS] AS SCH WITH(NOLOCK)
		ON SCH.[SCHEMA_ID] = TAB.[SCHEMA_ID] AND TAB.NAME= @TABLENAME
			BEGIN
				OPEN @C_INDEXNAME2
				FETCH NEXT FROM @C_INDEXNAME2 INTO @C_INDEXNAME,@C_COLNAME1
				WHILE(@@FETCH_STATUS = 0)
				BEGIN
					
					BEGIN
						SET @C_COLNAME2 = SUBSTRING(@C_COLNAME1, 1, 9)
						--Print('@C_COLNAME2 :' + @C_COLNAME2)
						--Print('@C_COLNAME  :' + @C_COLNAME)
					END
					--Print('@columnname :' + @columnname)
					/*SET @C_CHECKCOLUMNEXISTENCE = CHARINDEX(@COLUMNNAME,@C_COLNAME1)
					IF(@C_CHECKCOLUMNEXISTENCE > 0)
					BEGIN
						SET @OUTFLAG = 1
						BREAK;
					END*/
					--Print('@C_COLNAME  :' + @C_COLNAME)
					IF (UPPER(@C_COLNAME2) = UPPER('Q_QUEUEID'))
					BEGIN
						SET @C_CHECKCOLUMNEXISTENCE = CHARINDEX(@COLUMNNAME,@C_COLNAME1)
						IF(@C_CHECKCOLUMNEXISTENCE > 0)
						BEGIN
							SET @OUTFLAG = 1
							BREAK;
						END
					END
					FETCH NEXT FROM @C_INDEXNAME2 INTO @C_INDEXNAME,@C_COLNAME1
				END
				CLOSE @C_INDEXNAME2
				DEALLOCATE @C_INDEXNAME2
			END
			--print('hi shahzad')
			RETURN @OUTFLAG
		END TRY
		BEGIN CATCH
			RAISERROR('CHECKINDEXBYORDEREDCOLNAMES PROCEDURE THROWING THE EXCEPTION',16,1)
		END CATCH
	END
	
	GO
	
	CREATE PROCEDURE INSERTWFHEALTHCHECKUP
	(
		@ENTITY_TYPE INT,
		@SUB_ENTITY_TYPE INT,
		@PROCESS_NAME NVARCHAR(128),
		@ACTIVITY_NAME NVARCHAR(128),
		@QUEUE_NAME NVARCHAR(128),
		@FIELD_1 NVARCHAR(128),
		@FIELD_2 NVARCHAR(128),
		@FIELD_3 NVARCHAR(128),
		@FIELD_4 NVARCHAR(128),
		@FIELD_5 NVARCHAR(128),
		@DESCRIPTION NVARCHAR(512),
		@SEVERITY INT,
		@OBSERVATION NVARCHAR(512),
		@IMPACT NVARCHAR(512),
		@RECOMMENDATION NVARCHAR(1024)
	)
	AS
	BEGIN
		BEGIN TRY
			INSERT INTO WFHEALTHCHECKUPTABLE(ENTITY_TYPE,SUB_ENTITY_TYPE,PROCESS_NAME,ACTIVITY_NAME,QUEUE_NAME,FIELD_1,FIELD_2,FIELD_3,FIELD_4,FIELD_5,DESCRIPTION,TIMESTAMP,SEVERITY,OBSERVATION,IMPACT,RECOMMENDATION) VALUES(@ENTITY_TYPE,@SUB_ENTITY_TYPE,@PROCESS_NAME,@ACTIVITY_NAME,@QUEUE_NAME,@FIELD_1,@FIELD_2,@FIELD_3,@FIELD_4,@FIELD_5,@DESCRIPTION,GETDATE(),@SEVERITY,@OBSERVATION,@IMPACT,@RECOMMENDATION)
		END TRY
		BEGIN CATCH
			RAISERROR('INSERTWFHEALTHCHECKUP PROCEDURE THROWING THE EXCEPTION',16,1)
		END CATCH
	END
	GO	
	BEGIN
		BEGIN
		If Exists (Select * from SysObjects WITH(NOLOCK) Where xType = 'P' and name = 'CHECKINDEXBYORDEREDCOLNAMES')
		BEGIN
			EXECUTE ('DROP PROCEDURE CHECKINDEXBYORDEREDCOLNAMES')
		END
		END
	END
	GO
	CREATE PROCEDURE CHECKINDEXBYORDEREDCOLNAMES
	( 
		@TABLENAME NVARCHAR(MAX),
		@COLUMNNAME NVARCHAR(MAX),
		@OUTFLAG INT OUT
	)
	AS 
	BEGIN
		BEGIN TRY
			DECLARE @C_INDEXNAME2 CURSOR 
			DECLARE @C_INDEXNAME NVARCHAR(MAX)
			DECLARE @C_COLNAME NVARCHAR(MAX)
			DECLARE @FLAG INT
			DECLARE @C_CHECKHYPHEN INT
			DECLARE @C_VALUE INT
			SET @C_INDEXNAME2 = CURSOR FORWARD_ONLY STATIC FOR
				SELECT 
		IND.[NAME] AS INDEXNAME,
		UPPER(SUBSTRING(( SELECT ':' + AC.NAME
		FROM SYS.[TABLES] AS T WITH(NOLOCK)
		INNER JOIN SYS.[INDEXES] I WITH(NOLOCK)
		ON T.[OBJECT_ID] = I.[OBJECT_ID]
		INNER JOIN SYS.[INDEX_COLUMNS] IC WITH(NOLOCK)
		ON I.[OBJECT_ID] = IC.[OBJECT_ID]
		AND I.[INDEX_ID] = IC.[INDEX_ID]
		INNER JOIN SYS.[ALL_COLUMNS] AC WITH(NOLOCK)
		ON T.[OBJECT_ID] = AC.[OBJECT_ID]
		AND IC.[COLUMN_ID] = AC.[COLUMN_ID]
		WHERE IND.[OBJECT_ID] = I.[OBJECT_ID]
		AND IND.INDEX_ID = I.INDEX_ID
		AND IC.IS_INCLUDED_COLUMN = 0

		ORDER BY IC.KEY_ORDINAL
		FOR
		XML PATH('')

		), 2, 8000)) AS KEYCOLS
		FROM SYS.[INDEXES] IND WITH(NOLOCK)
		INNER JOIN SYS.[TABLES] AS TAB WITH(NOLOCK)
		ON TAB.[OBJECT_ID] = IND.[OBJECT_ID]
		INNER JOIN SYS.[SCHEMAS] AS SCH WITH(NOLOCK)
		ON SCH.[SCHEMA_ID] = TAB.[SCHEMA_ID] AND TAB.NAME= @TABLENAME
		

			BEGIN
				OPEN @C_INDEXNAME2
				FETCH NEXT FROM @C_INDEXNAME2 INTO @C_INDEXNAME,@C_COLNAME
				WHILE(@@FETCH_STATUS = 0)
				BEGIN
					SET @FLAG = 0
					SET @OUTFLAG = 0
					SET @C_VALUE = 0
					
					/*BEGIN
						SET @COLUMNNAME = SUBSTRING(@COLUMNNAME,0,@C_CHECKHYPHEN)
						Print('@columnname :' + @columnname)
						Print('@C_COLNAME  :' + @C_COLNAME)
					END
					Print('@columnname :' + @columnname)
					Print('@C_COLNAME  :' + @C_COLNAME)*/
					SET @C_CHECKHYPHEN = CHARINDEX(':',@COLUMNNAME)
					IF (@C_CHECKHYPHEN > 0)
					BEGIN
						IF(UPPER(@C_COLNAME) = UPPER(@COLUMNNAME))
						BEGIN
							SET @FLAG = 1
							SET @OUTFLAG = 1
							RETURN @OUTFLAG
						END
					END
					ELSE
					BEGIN
						SET @C_VALUE = CHARINDEX(@COLUMNNAME,@C_COLNAME)
						IF(@C_VALUE = 1)
						BEGIN
							SET @FLAG = 2
							SET @OUTFLAG = 1
							RETURN @OUTFLAG
						END
						ELSE
						BEGIN
							IF(UPPER(@C_COLNAME) = UPPER(@COLUMNNAME))
							BEGIN
								SET @FLAG = 1
								SET @OUTFLAG = 1
								RETURN @OUTFLAG
							END
						END
					END
					FETCH NEXT FROM @C_INDEXNAME2 INTO @C_INDEXNAME,@C_COLNAME
				END
				CLOSE @C_INDEXNAME2
				DEALLOCATE @C_INDEXNAME2
			END
			
			
			/*IF(@FLAG = 0)
			BEGIN
				SET @OUTFLAG = 0
				RETURN @OUTFLAG
			END
			ELSE
			BEGIN
				SET @OUTFLAG = 1
				RETURN @OUTFLAG
			END*/
			SET @OUTFLAG = 0
			RETURN @OUTFLAG
		END TRY
		BEGIN CATCH
			RAISERROR('CHECKINDEXBYORDEREDCOLNAMES PROCEDURE THROWING THE EXCEPTION',16,1)
		END CATCH
	END
	GO
	
	BEGIN
		IF EXISTS (SELECT *
           FROM   sys.objects WITH(NOLOCK)
           WHERE  object_id = OBJECT_ID(N'FETCHPROCESSNAME')
                  AND type IN ( N'FN', N'IF', N'TF', N'FS', N'FT' ))
		EXECUTE ('DROP FUNCTION FETCHPROCESSNAME')
	END
	GO

	CREATE FUNCTION FETCHPROCESSNAME (@PROCESSDEFID INT)
	RETURNS NVARCHAR(128)
	AS 
	BEGIN
		DECLARE @PROCESSNAME NVARCHAR(128)
		BEGIN
			SELECT @PROCESSNAME = PROCESSNAME FROM PROCESSDEFTABLE WITH(NOLOCK) WHERE PROCESSDEFID = @PROCESSDEFID;
			RETURN @PROCESSNAME
		END
	END
	GO
	BEGIN
		IF EXISTS (SELECT *
			FROM   sys.objects
			WITH(NOLOCK)
			WHERE  object_id = OBJECT_ID(N'CHECKEXTENDEDVARIABLEPRESENT')
                  AND type IN ( N'FN', N'IF', N'TF', N'FS', N'FT' ))
		EXECUTE ('DROP FUNCTION CHECKEXTENDEDVARIABLEPRESENT')
	END
	GO
	CREATE FUNCTION CHECKEXTENDEDVARIABLEPRESENT (@FILTER NVARCHAR(MAX))
	RETURNS INTEGER
	AS
	BEGIN
		DECLARE @COUNT INTEGER
		BEGIN
			SELECT @COUNT = CHARINDEX('VAR_', @FILTER)
			RETURN @COUNT
		END
	END
	GO
	BEGIN
		IF EXISTS (SELECT *
			FROM   sys.objects
			WITH(NOLOCK)
			WHERE  object_id = OBJECT_ID(N'CHKOPERATOR')
                  AND type IN ( N'FN', N'IF', N'TF', N'FS', N'FT' ))
		EXECUTE ('DROP FUNCTION CHKOPERATOR')
	END
	GO
	CREATE FUNCTION CHKOPERATOR (@FILTER NVARCHAR(MAX))
	RETURNS INTEGER
	AS
	BEGIN
		DECLARE @COUNT INTEGER
		BEGIN
			SELECT @COUNT = CHARINDEX('LIKE', UPPER(@FILTER))
			SELECT @COUNT = CHARINDEX('!=', UPPER(@FILTER))
			SELECT @COUNT = CHARINDEX('IN(', UPPER(@FILTER))
			SELECT @COUNT = CHARINDEX('IN (', UPPER(@FILTER))
			RETURN @COUNT
		END
		
	END
	GO
	BEGIN
		IF EXISTS (SELECT *
			FROM   sys.objects
			WITH(NOLOCK)
			WHERE  object_id = OBJECT_ID(N'CHKEXTVARPRESENTANDRETURN')
                  AND type IN ( N'FN', N'IF', N'TF', N'FS', N'FT' ))
		EXECUTE ('DROP FUNCTION CHKEXTVARPRESENTANDRETURN')
	END
	GO
	CREATE FUNCTION CHKEXTVARPRESENTANDRETURN (@VALUE NVARCHAR(MAX), @FILTER NVARCHAR(MAX))
	RETURNS INTEGER
	AS
	BEGIN
		DECLARE @COUNT INTEGER
		BEGIN
			SELECT @COUNT = CHARINDEX(UPPER(@VALUE), UPPER(@FILTER))
			RETURN @COUNT
		END
	END
	GO
	
	BEGIN
		IF EXISTS (SELECT *
			FROM   sys.objects
			WITH(NOLOCK)
			WHERE  object_id = OBJECT_ID(N'RETURNEXTENDEDVARIABLEPRESENT')
                  AND type IN ( N'FN', N'IF', N'TF', N'FS', N'FT' ))
		EXECUTE ('DROP FUNCTION RETURNEXTENDEDVARIABLEPRESENT')
	END
	GO
	CREATE FUNCTION RETURNEXTENDEDVARIABLEPRESENT (@FILTER NVARCHAR(MAX))
	RETURNS NVARCHAR(MAX)
	
	BEGIN
		DECLARE @VARIABLE NVARCHAR(MAX)
		BEGIN
			IF ( DBO.CHKEXTVARPRESENTANDRETURN('VAR_DATE5', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_DATE5'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_DATE6', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_DATE6'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_LONG5', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_LONG5'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_LONG6', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_LONG6'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR9', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR9'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR10', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR10'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR11', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR11'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR12', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR12'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR13', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR13'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR14', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR14'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR15', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR15'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR16', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR16'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR17', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR17'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR18', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR18'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR19', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR19'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR20', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR20'
			END
			ELSE
			BEGIN
				SET @VARIABLE = 'NONE'
			END
			RETURN @VARIABLE
		END
	END
	GO
	BEGIN
		IF EXISTS (SELECT *
			FROM   sys.objects
			WITH(NOLOCK)
			WHERE  object_id = OBJECT_ID(N'CHKFILTERVARIABLE')
                  AND type IN ( N'FN', N'IF', N'TF', N'FS', N'FT' ))
		EXECUTE ('DROP FUNCTION CHKFILTERVARIABLE')
	END
	GO
	CREATE FUNCTION CHKFILTERVARIABLE (@FILTER NVARCHAR(MAX))
	RETURNS NVARCHAR(MAX)
	AS
	BEGIN
		DECLARE @VARIABLE NVARCHAR(MAX)
		BEGIN
			IF ( DBO.CHKEXTVARPRESENTANDRETURN('VAR_INT1', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_INT1'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_INT2', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_INT2'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_INT3', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_INT3'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_INT4', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_INT4'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_INT5', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_INT5'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_INT6', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_INT6'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_INT7', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_INT7'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_INT8', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_INT8'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_DATE1', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_DATE1'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_DATE2', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_DATE2'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_DATE3', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_DATE3'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_DATE4', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_DATE4'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_LONG1', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_LONG1'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_LONG2', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_LONG2'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_LONG3', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_LONG3'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_LONG4', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_LONG4'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR1', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR1'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR2', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR2'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR3', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR3'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR4', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR4'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR5', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR5'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR6', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR6'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR7', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR7'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('VAR_STR8', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'VAR_STR8'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('INTRODUCEDBY', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'INTRODUCEDBY'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('CREATEDBY', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'CREATEDBY'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('CREATEDBYNAME', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'CREATEDBYNAME'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('PRIORITYLEVEL', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'PRIORITYLEVEL'
			END
			ELSE IF (DBO.CHKEXTVARPRESENTANDRETURN('CREATEDDATETIME', @FILTER) > 0)
			BEGIN
				SET @VARIABLE = 'CREATEDDATETIME'
			END
			ELSE
			BEGIN
				SET @VARIABLE = 'NONE'
			END
			RETURN @VARIABLE
		END
	END
	GO

	BEGIN
		IF EXISTS (SELECT *
			FROM   sys.objects
			WITH(NOLOCK)
			WHERE  object_id = OBJECT_ID(N'GETORDERBYCOLUMNNAME')
                  AND type IN ( N'FN', N'IF', N'TF', N'FS', N'FT' ))
		EXECUTE ('DROP FUNCTION GETORDERBYCOLUMNNAME')
	END
	GO
	
	CREATE FUNCTION GETORDERBYCOLUMNNAME (@V_ORDERBY INT)
	RETURNS NVARCHAR(128)
	AS
	BEGIN
		DECLARE @V_COLUMN_NAME NVARCHAR(256)
			IF(@V_ORDERBY = 1) 
			BEGIN
				SET @V_COLUMN_NAME = 'PRIORITYLEVEL'
			END
			ELSE IF(@V_ORDERBY = 2) 
			BEGIN
				SET @V_COLUMN_NAME = 'PROCESSINSTANCEID'
			END
			ELSE IF(@V_ORDERBY = 3) 
			BEGIN
				SET @V_COLUMN_NAME = 'ACTIVITYNAME'
			END
			ELSE IF(@V_ORDERBY = 4) 
			BEGIN
				SET @V_COLUMN_NAME = 'LOCKEDBYNAME'
			END
			ELSE IF(@V_ORDERBY = 5) 
			BEGIN
				SET @V_COLUMN_NAME = 'INTRODUCEDBY'
			END
			ELSE IF(@V_ORDERBY = 6) 
			BEGIN
				SET @V_COLUMN_NAME = 'INSTRUMENTSTATUS'
			END
			ELSE IF(@V_ORDERBY = 7) 
			BEGIN
				SET @V_COLUMN_NAME = 'CHECKLISTCOMPLETEFLAG'
			END
			ELSE IF(@V_ORDERBY = 8) 
			BEGIN
				SET @V_COLUMN_NAME = 'LOCKSTATUS'
			END
			ELSE IF(@V_ORDERBY = 9) 
			BEGIN
				SET @V_COLUMN_NAME = 'WORKITEMSTATE'
			END
			ELSE IF(@V_ORDERBY = 10) 
			BEGIN
				SET @V_COLUMN_NAME = 'ENTRYDATETIME'
			END
			ELSE IF(@V_ORDERBY = 11) 
			BEGIN
				SET @V_COLUMN_NAME = 'VALIDTILL'
			END
			ELSE IF(@V_ORDERBY = 12) 
			BEGIN
				SET @V_COLUMN_NAME = 'LOCKEDTIME'
			END
			ELSE IF(@V_ORDERBY = 13) 
			BEGIN
				SET @V_COLUMN_NAME = 'INTRODUCTIONDATETIME'
			END
			ELSE IF(@V_ORDERBY = 14) 
			BEGIN
				SET @V_COLUMN_NAME = 'QUEUENAME'
			END
			
			ELSE IF(@V_ORDERBY = 16) 
			BEGIN
				SET @V_COLUMN_NAME = 'ASSIGNEDUSER'
			END
			ELSE IF(@V_ORDERBY = 17) 
			BEGIN
				SET @V_COLUMN_NAME = 'STATUS'
			END
			ELSE IF(@V_ORDERBY = 18) 
			BEGIN
				SET @V_COLUMN_NAME = 'CREATEDDATETIME';
			END
			ELSE IF(@V_ORDERBY = 19) 
			BEGIN
				SET @V_COLUMN_NAME = 'EXPECTEDWORKITEMDELAY'
			END
			ELSE IF(@V_ORDERBY = 20) 
			BEGIN
				SET @V_COLUMN_NAME = 'CHILDPROCESSINSTANCEID'
			END
			
			RETURN @V_COLUMN_NAME
	END
	GO
	
	If Exists (Select * from SysObjects WITH(NOLOCK) Where xType = 'P' and name = 'WFHEALTHCHECKUP')
	BEGIN
		EXECUTE ('DROP PROCEDURE WFHEALTHCHECKUP')
	END
	GO
	
	
	BEGIN
		If Exists (Select * from SysObjects WITH(NOLOCK) Where xType = 'P' and name = 'WFParseExpression')
		BEGIN
			EXECUTE ('DROP PROCEDURE WFParseExpression')
		END
	END
	GO
	CREATE PROCEDURE WFParseExpression(
	@ARGUMENT1 NVARCHAR(MAX),
	@EXPRESSION NVARCHAR(1),
	@FIRST NVARCHAR(100) OUT,
	@SECOND NVARCHAR(100) OUT, 
	@THIRD NVARCHAR(100) OUT, 
	@FOURTH NVARCHAR(100) OUT
	)
	AS
	DECLARE @LEN1 INTEGER
	DECLARE @LEN2 INTEGER
	DECLARE @LEN3 INTEGER
	DECLARE @COUNT INTEGER
	DECLARE @SUB_STRING NVARCHAR(MAX)
	BEGIN
		SET @LEN1 = 0
		SET @LEN2 = 0
		SET @LEN3 = 0
		SET @COUNT = 1
		SET @LEN1 = LEN(@ARGUMENT1)
		WHILE(1 = 1)
		BEGIN
			SELECT @LEN2 = CHARINDEX(@EXPRESSION, @ARGUMENT1, @LEN3)
			IF(@COUNT = 1)
			BEGIN
				SELECT @FIRST = SUBSTRING(@ARGUMENT1, @LEN3 + 1, @LEN2 - @LEN3 - 1)
				SELECT @COUNT = @COUNT + 1
			END
			ELSE IF(@COUNT = 2)
			BEGIN
				SELECT @SECOND = SUBSTRING(@ARGUMENT1, @LEN3, @LEN2 - @LEN3)
				SELECT @COUNT = @COUNT + 1
			END
			ELSE IF(@COUNT = 3)
			BEGIN
				SELECT @THIRD = SUBSTRING(@ARGUMENT1, @LEN3, @LEN2 - @LEN3)
				SELECT @COUNT = @COUNT + 1
			END
			ELSE IF(@COUNT = 4)
			BEGIN
				SELECT @FOURTH = SUBSTRING(@ARGUMENT1, @LEN3, @LEN1)
				BREAK
			END
			SELECT @LEN3 = @LEN2 + 1
			SELECT @LEN2 = @LEN2 + 1
		END
	END
	GO
	BEGIN
		If Exists (Select * from SysObjects WITH(NOLOCK) Where xType = 'P' and name = 'WFParseExpressionValue')
		BEGIN
			EXECUTE ('DROP PROCEDURE WFParseExpressionValue')
		END
	END
	GO
	CREATE PROCEDURE WFParseExpressionValue(
	@ARGUMENT1 NVARCHAR(MAX),
	@EXPRESSION NVARCHAR(1),
	@FIRST NVARCHAR(100) OUT,
	@SECOND NVARCHAR(100) OUT, 
	@THIRD NVARCHAR(100) OUT
	)
	AS
	DECLARE @LEN1 INTEGER
	DECLARE @LEN2 INTEGER
	DECLARE @LEN3 INTEGER
	DECLARE @COUNT INTEGER
	DECLARE @SUB_STRING NVARCHAR(MAX)
	BEGIN
		SET @LEN1 = 0
		SET @LEN2 = 0
		SET @LEN3 = 0
		SET @COUNT = 1
		SET @LEN1 = LEN(@ARGUMENT1)
		WHILE(1 = 1)
		BEGIN
			SELECT @LEN2 = CHARINDEX(@EXPRESSION, @ARGUMENT1, @LEN3)
			IF(@COUNT = 1)
			BEGIN
				SELECT @FIRST = SUBSTRING(@ARGUMENT1, @LEN3 + 1, @LEN2 - @LEN3 - 1)
				SELECT @COUNT = @COUNT + 1
			END
			ELSE IF(@COUNT = 2)
			BEGIN
				SELECT @SECOND = SUBSTRING(@ARGUMENT1, @LEN3, @LEN2 - @LEN3)
				SELECT @COUNT = @COUNT + 1
			END
			ELSE IF(@COUNT = 3)
			BEGIN
				SELECT @THIRD = SUBSTRING(@ARGUMENT1, @LEN3, @LEN1)
				BREAK
			END
			SELECT @LEN3 = @LEN2 + 1
			SELECT @LEN2 = @LEN2 + 1
		END
	END
	
	GO
	If Exists (Select * from SysObjects WITH(NOLOCK) Where xType = 'P' and name = 'WFHEALTHCHECKUP')
	BEGIN
		EXECUTE ('DROP PROCEDURE WFHEALTHCHECKUP')
	END
	GO
BEGIN
		IF EXISTS (SELECT *
			FROM   sys.objects
			WITH(NOLOCK)
			WHERE  object_id = OBJECT_ID(N'GetSearchVariableCount')
                  AND type IN ( N'FN', N'IF', N'TF', N'FS', N'FT' ))
		EXECUTE ('DROP FUNCTION GetSearchVariableCount')
END

GO
CREATE FUNCTION GetSearchVariableCount(@MINCOLUMNCOUNT1 INTEGER, @MAXCOLUMNCOUNT1 INTEGER, @MINCOLUMNCOUNT2 INTEGER, @MAXCOLUMNCOUNT2 INTEGER, @MINCOLUMNCOUNT3 INTEGER, @MAXCOLUMNCOUNT3 INTEGER, @MINCOLUMNCOUNT4 INTEGER, @SEARCHVARIABLECOUNT1 INTEGER, @SEARCHVARIABLECOUNT2 INTEGER, @SEARCHVARIABLECOUNT3 INTEGER, @SEARCHVARIABLECOUNT4 INTEGER, @TABLECOLUMNCOUNT INTEGER)
RETURNS INTEGER
AS
BEGIN
	DECLARE @SEARCHVARIABLECOUNT INTEGER
	BEGIN
		IF(@TABLECOLUMNCOUNT > @MINCOLUMNCOUNT4)
		BEGIN
			--PRINT('SET1')
			SET @SEARCHVARIABLECOUNT = @SEARCHVARIABLECOUNT4 
		END
		ELSE IF(@MAXCOLUMNCOUNT3 > @TABLECOLUMNCOUNT AND @MINCOLUMNCOUNT3 < @TABLECOLUMNCOUNT)
		BEGIN
			--PRINT('SET2')
			SET @SEARCHVARIABLECOUNT = @SEARCHVARIABLECOUNT3
		END
		ELSE IF(@MAXCOLUMNCOUNT2 > @TABLECOLUMNCOUNT AND @MINCOLUMNCOUNT2 < @TABLECOLUMNCOUNT)
		BEGIN
			--PRINT('SET3')
			SET @SEARCHVARIABLECOUNT = @SEARCHVARIABLECOUNT2
		END
		ELSE IF(@MAXCOLUMNCOUNT1 > @TABLECOLUMNCOUNT AND @MINCOLUMNCOUNT1 < @TABLECOLUMNCOUNT)
		BEGIN
			--PRINT('SET4')
			SET @SEARCHVARIABLECOUNT = @SEARCHVARIABLECOUNT1
		END
	END
	RETURN @SEARCHVARIABLECOUNT
END
GO
BEGIN
		IF EXISTS (SELECT *
			FROM   sys.objects
			WITH(NOLOCK)
			WHERE  object_id = OBJECT_ID(N'GETSEVERITYONCOUNT')
                  AND type IN ( N'FN', N'IF', N'TF', N'FS', N'FT' ))
		EXECUTE ('DROP FUNCTION GETSEVERITYONCOUNT')
END

GO
CREATE FUNCTION GETSEVERITYONCOUNT (@COUNT1 INTEGER, @CRITICALVALUE INTEGER, @HIGHVALUE INTEGER, @MEDIUMVALUE INTEGER)
RETURNS INTEGER
AS
BEGIN
	DECLARE @SEVERITY INTEGER
	BEGIN
		IF(@COUNT1 > @CRITICALVALUE)
		BEGIN
			SET @SEVERITY = 3
		END
		ELSE IF(@COUNT1 > @HIGHVALUE AND @COUNT1 < @CRITICALVALUE)
		BEGIN
			SET @SEVERITY = 2
		END
		ELSE IF(@COUNT1 > @MEDIUMVALUE AND @COUNT1 < @HIGHVALUE)
		BEGIN
			SET @SEVERITY = 1
		END
		ELSE IF(@COUNT1 < @MEDIUMVALUE)
		BEGIN
			SET @SEVERITY = 0
		END
	END
	RETURN @SEVERITY
END
GO

BEGIN
		IF EXISTS (SELECT *
			FROM   sys.objects
			WITH(NOLOCK)
			WHERE  object_id = OBJECT_ID(N'GetSeverityonTableCount')
                  AND type IN ( N'FN', N'IF', N'TF', N'FS', N'FT' ))
		EXECUTE ('DROP FUNCTION GetSeverityonTableCount')
END

GO
CREATE FUNCTION GetSeverityOnTableCount(@SEVERITYLOWMINCOUNT INTEGER, @SEVERITYLOWMAXCOUNT INTEGER, @SEVERITYMEDIUMMINCOUNT INTEGER, @SEVERITYMEDIUMMAXCOUNT INTEGER, @SEVERITYHIGHMINCOUNT INTEGER, @SEVERITYHIGHMAXCOUNT INTEGER, @SEVERITYCRITICALMINCOUNT INTEGER, @TABLECOLUMNROWCOUNT INTEGER)
RETURNS INTEGER
AS
BEGIN
	DECLARE @SEVERITY INTEGER
	BEGIN
		IF(@TABLECOLUMNROWCOUNT > @SEVERITYCRITICALMINCOUNT)
		BEGIN
			SET @SEVERITY = 3
		END
		ELSE IF(@SEVERITYHIGHMAXCOUNT > @TABLECOLUMNROWCOUNT AND @SEVERITYHIGHMINCOUNT < @TABLECOLUMNROWCOUNT)
		BEGIN
			SET @SEVERITY = 2
		END
		ELSE IF(@SEVERITYMEDIUMMAXCOUNT > @TABLECOLUMNROWCOUNT AND @SEVERITYMEDIUMMINCOUNT < @TABLECOLUMNROWCOUNT)
		BEGIN
			SET @SEVERITY = 1
		END
		ELSE IF(@SEVERITYLOWMAXCOUNT > @TABLECOLUMNROWCOUNT AND @SEVERITYLOWMINCOUNT < @TABLECOLUMNROWCOUNT)
		BEGIN
			SET @SEVERITY = 0
		END
	END
	RETURN @SEVERITY
END

GO

	If Exists (Select * from SysObjects WITH(NOLOCK) Where xType = 'P' and name = 'WFHealthCheckUP')
	BEGIN
		EXECUTE ('DROP PROCEDURE WFHealthCheckUP')
	END
	GO
	
	CREATE PROCEDURE WFHEALTHCHECKUP(
		@ARGUMENT1 NVARCHAR(MAX),
		@ARGUMENT2 NVARCHAR(MAX),
		@ARGUMENT3 NVARCHAR(128),
		@ARGUMENT4 NVARCHAR(MAX)
	)
	AS
	SET NOCOUNT ON;
	BEGIN
	DECLARE @COUNT1 INT
	DECLARE @PROCESSDEFID INT
	DECLARE @COUNT2 INT
	DECLARE @COUNT3 INT      
	DECLARE @COUNT4 INT
	DECLARE @COUNT5 INT
	DECLARE @COUNT6 INT
	DECLARE @PARENTOBJECT NVARCHAR(128)
	DECLARE @FOREIGNKEY NVARCHAR(128)
	DECLARE @CHILDOBJECT NVARCHAR(128)
	DECLARE @REFKEY NVARCHAR(128)
	DECLARE @ORDINAL_POSITION INT
	DECLARE @ACTIONID INT
	DECLARE @PERCENTAGE DECIMAL
	DECLARE @FIELDNAME NVARCHAR(128)
	DECLARE @EXTOBJID INT
	DECLARE @COLUMNNAME NVARCHAR(128)
	DECLARE @CONSTRAINT_NAME NVARCHAR(128)
	DECLARE @VARIABLEID INT
	DECLARE @ORDERBY INT
	DECLARE @ACTIVITYID INT
	DECLARE @PROCESSNAME NVARCHAR(256)
	DECLARE @ACTIVITYNAME NVARCHAR(128)
	DECLARE @ACTIVITYTYPE INT
	DECLARE @TABLENAME NVARCHAR(128)
	DECLARE @QUERY NVARCHAR(512)
	DECLARE @PARAMDEFINITION NVARCHAR(500);
	DECLARE @ROW_COUNT INT
	DECLARE @INDEX_COLUMNS NVARCHAR(256)
	DECLARE @INDEX_TYPE NVARCHAR(128)
	DECLARE @SYSTEMDEFINEDNAME NVARCHAR(256)
	DECLARE @VARIABLETYPE NVARCHAR(128)
	DECLARE @QUEUENAME NVARCHAR(128)
	DECLARE @QUEUEFILTER NVARCHAR(128)
	DECLARE @QUEUEID INT
	DECLARE @QUERYFILTER NVARCHAR(128)
	DECLARE @USERID INT
	DECLARE @MYCURSOR CURSOR
	DECLARE @CHECKNUMBER INT
	DECLARE @DATATYPE NVARCHAR(128)
	DECLARE @THRESHOLDROUTINGCOUNT INT
	DECLARE @THRESHOLDMAXCOUNT INT
	DECLARE @STEP_DETAILS VARCHAR(4000)
	DECLARE @v_scriptName varchar(100)
	DECLARE @LIMIT BIGINT
	DECLARE @REMAININGVALUE BIGINT
	DECLARE @VALUE DECIMAL(25, 8)
	DECLARE @COUNT_MAX BIGINT
	DECLARE @TOTALNOOFDAYS1 BIGINT
	DECLARE @TOTALNOOFDAYS2 BIGINT
	DECLARE @REMAININGPERCENTAGE DECIMAL(25,8)
	DECLARE @REMAININGDAYS BIGINT
	DECLARE @SEARCHVARIABLEID INT
	DECLARE @CHECKPROCESSEXIST INT
	DECLARE @CHECKTABLEEXIST INT
	DECLARE @CURSOR_DYNAMIC CURSOR
	DECLARE @USERNAME NVARCHAR(128)
	DECLARE @GROUPNAME NVARCHAR(128)
	DECLARE @SEVERITYLOW NVARCHAR(128)
	DECLARE @SEVERITYLOWMINCOUNT NVARCHAR(128)
	DECLARE @SEVERITYLOWMAXCOUNT NVARCHAR(128)
	DECLARE @SEVERITYMEDIUM NVARCHAR(128)
	DECLARE @SEVERITYMEDIUMMINCOUNT NVARCHAR(128)
	DECLARE @SEVERITYMEDIUMMAXCOUNT NVARCHAR(128)
	DECLARE @SEVERITYHIGH NVARCHAR(128)
	DECLARE @SEVERITYHIGHMINCOUNT NVARCHAR(128)
	DECLARE @SEVERITYHIGHMAXCOUNT NVARCHAR(128)
	DECLARE @SEVERITYCRITICAL NVARCHAR(128)
	DECLARE @SEVERITYCRITICALMINCOUNT NVARCHAR(128)
	DECLARE @SEVERITYCRITICALMAXCOUNT NVARCHAR(128)
	DECLARE @MINCOLUMNCOUNT1 NVARCHAR(128)
	DECLARE @MINCOLUMNCOUNT2 NVARCHAR(128)
	DECLARE @MINCOLUMNCOUNT3 NVARCHAR(128)
	DECLARE @MINCOLUMNCOUNT4 NVARCHAR(128)
	DECLARE @MAXCOLUMNCOUNT1 NVARCHAR(128)
	DECLARE @MAXCOLUMNCOUNT2 NVARCHAR(128)
	DECLARE @MAXCOLUMNCOUNT3 NVARCHAR(128)
	DECLARE @MAXCOLUMNCOUNT4 NVARCHAR(128)
	DECLARE @SEARCHVARIABLEPERCENTAGE1 NVARCHAR(128)
	DECLARE @SEARCHVARIABLEPERCENTAGE2 NVARCHAR(128)
	DECLARE @SEARCHVARIABLEPERCENTAGE3 NVARCHAR(128)
	DECLARE @SEARCHVARIABLEPERCENTAGE4 NVARCHAR(128)
	DECLARE @FIRSTSEVERITY NVARCHAR(256)
	DECLARE @SECONDSEVERITY NVARCHAR(256)
	DECLARE @THIRDSEVERITY NVARCHAR(256)
	DECLARE @FOURTHSEVERITY NVARCHAR(256)
	DECLARE @FIRSTTABLEINFO NVARCHAR(256)
	DECLARE @SECONDTABLEINFO NVARCHAR(256)
	DECLARE @THIRDTABLEINFO NVARCHAR(256)
	DECLARE @FOURTHTABLEINFO NVARCHAR(256)
	DECLARE @CHECKCOLUMNCOUNT INTEGER
	DECLARE @COLUMNSEARCHPERCENTAGECOUNT INTEGER
	DECLARE @EXTTABLEROWCOUNT INTEGER
	DECLARE @SEVERITY INTEGER
	DECLARE @TABLECOLUMNCOUNT INTEGER
	DECLARE @PRINTDATA1 NVARCHAR(512)
	DECLARE @DATATYPE1 NVARCHAR(128)
	DECLARE @DATATYPE2 NVARCHAR(128)
	DECLARE @EXTENDEDVARIABLE NVARCHAR(128)
	DECLARE @EXTENDEDVARIABLE2 NVARCHAR(128)
	DECLARE @SEARCHAPPENDVARIABLE NVARCHAR(512)
	DECLARE @ORDERAPPENDVARIABLE NVARCHAR(1024)
	DECLARE @ERRORMESSAGE NVARCHAR(MAX)
	DECLARE @TYPE1 NVARCHAR(100)
	DECLARE @PARAM1 NVARCHAR(512)
	DECLARE @COLUMNAPPENDVAR NVARCHAR(1024)
	DECLARE @MINSEARCHVARIABLE INTEGER
	DECLARE @LEN1 INTEGER
	DECLARE @LEN2 INTEGER
	DECLARE @LEN3 INTEGER
	DECLARE @LEN4 INTEGER
	DECLARE @LEN5 INTEGER
	DECLARE @SUBSTRING1 NVARCHAR(512)
	DECLARE @SUBSTRING2 NVARCHAR(512)
	DECLARE @SUBSTRING3 NVARCHAR(512)
	DECLARE @SUBSTRING4 NVARCHAR(512)
	DECLARE @SUBOUT1 NVARCHAR(2024)
	DECLARE @SUBOUT2 NVARCHAR(2024)
	DECLARE @vExists INT
	SELECT @v_scriptName = 'WFHEALTHCHECKUPREPORT'
	
	BEGIN
		BEGIN
			EXECUTE('DELETE FROM WFHEALTHCHECKUPTABLE')
		END
		BEGIN
			EXEC WFPARSEEXPRESSION @ARGUMENT1, '#', @FIRSTSEVERITY OUTPUT, @SECONDSEVERITY OUTPUT, @THIRDSEVERITY OUTPUT, @FOURTHSEVERITY OUTPUT
			EXEC WFPARSEEXPRESSIONVALUE @FIRSTSEVERITY, ':', @SEVERITYLOW OUTPUT, @SEVERITYLOWMINCOUNT OUTPUT, @SEVERITYLOWMAXCOUNT OUTPUT
			EXEC WFPARSEEXPRESSIONVALUE @SECONDSEVERITY, ':', @SEVERITYMEDIUM OUTPUT, @SEVERITYMEDIUMMINCOUNT OUTPUT, @SEVERITYMEDIUMMAXCOUNT OUTPUT
			EXEC WFPARSEEXPRESSIONVALUE @THIRDSEVERITY, ':', @SEVERITYHIGH OUTPUT, @SEVERITYHIGHMINCOUNT OUTPUT, @SEVERITYHIGHMAXCOUNT OUTPUT
			EXEC WFPARSEEXPRESSIONVALUE @FOURTHSEVERITY, ':', @SEVERITYCRITICAL OUTPUT, @SEVERITYCRITICALMINCOUNT OUTPUT, @SEVERITYCRITICALMAXCOUNT OUTPUT
		END
		BEGIN
			EXEC WFPARSEEXPRESSION @ARGUMENT2, '#', @FIRSTTABLEINFO OUTPUT, @SECONDTABLEINFO OUTPUT, @THIRDTABLEINFO OUTPUT, @FOURTHTABLEINFO OUTPUT
			EXEC WFPARSEEXPRESSIONVALUE @FIRSTTABLEINFO , ':', @MINCOLUMNCOUNT1 OUTPUT, @MAXCOLUMNCOUNT1 OUTPUT, @SEARCHVARIABLEPERCENTAGE1 OUTPUT
			EXEC WFPARSEEXPRESSIONVALUE @SECONDTABLEINFO , ':', @MINCOLUMNCOUNT2 OUTPUT, @MAXCOLUMNCOUNT2 OUTPUT, @SEARCHVARIABLEPERCENTAGE2 OUTPUT
			EXEC WFPARSEEXPRESSIONVALUE @THIRDTABLEINFO, ':', @MINCOLUMNCOUNT3 OUTPUT, @MAXCOLUMNCOUNT3 OUTPUT, @SEARCHVARIABLEPERCENTAGE3 OUTPUT
			EXEC WFPARSEEXPRESSIONVALUE @FOURTHTABLEINFO, ':', @MINCOLUMNCOUNT4 OUTPUT, @MAXCOLUMNCOUNT4 OUTPUT, @SEARCHVARIABLEPERCENTAGE4 OUTPUT
		END
		BEGIN
			EXECUTE ('DELETE FROM WFHEALTHLOGTABLE')
		END
		EXECUTE ('DELETE FROM WFHEALTHSTOREIDENTITY')
		EXECUTE ('DELETE FROM WFHEALTH_INDEXLIST')
		EXECUTE ('DELETE FROM WFHEALTHIDENTITYCOLUMNTABLE')
		BEGIN
				BEGIN
				SELECT @COUNT1 = OBJECT_ID('TEMPDB..##TEMPWFPRODCOLUMN')
				IF(@COUNT1 > 0)
				BEGIN
					EXECUTE ('DROP TABLE ##TEMPWFPRODCOLUMN')
				END
					CREATE TABLE ##TEMPWFPRODCOLUMN(COLUMN_NAME NVARCHAR(128), ISALLOWED NVARCHAR(5))
			END
		END
		BEGIN
			BEGIN
				SELECT @COUNT1 = OBJECT_ID('TEMPDB..##TEMPCHECKCOLUMNEXIST')
				IF(@COUNT1 > 0)
				BEGIN
					EXECUTE ('DROP TABLE ##TEMPCHECKCOLUMNEXIST')
				END
					CREATE TABLE ##TEMPCHECKCOLUMNEXIST(COLUMN_NAME NVARCHAR(512))
			END
		END
		BEGIN
			WHILE(1 = 1)
			BEGIN
					SET @LEN1 = LEN(@ARGUMENT4)
					SELECT @LEN2 = CHARINDEX(char(25), @ARGUMENT4)
					IF(@LEN2 > 0)
					BEGIN
						SELECT @SUBSTRING1 = SUBSTRING(@ARGUMENT4, 0 , @LEN2)
					END
					ELSE
					BEGIN
						SET @SUBSTRING1 = @ARGUMENT4
					END
					SELECT @LEN5 = LEN(@SUBSTRING1)
					SELECT @LEN4 = CHARINDEX(char(21), @SUBSTRING1)
					SELECT @SUBSTRING2 = SUBSTRING(@SUBSTRING1, 0, @LEN4)
					SELECT @SUBSTRING3 = SUBSTRING(@SUBSTRING1, @LEN4 + 1, @LEN5)
					INSERT INTO ##TEMPWFPRODCOLUMN(COLUMN_NAME, ISALLOWED) VALUES(@SUBSTRING2, @SUBSTRING3)
					IF(@LEN2 <= 0)
					BEGIN
						BREAK
					END
					SELECT @ARGUMENT4 = SUBSTRING(@ARGUMENT4, @LEN2 + 1, @LEN1)
			END
		END
		BEGIN TRY
			BEGIN
				BEGIN
					IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WITH(NOLOCK) WHERE  TABLE_NAME = 'WFINSTRUMENTTABLE' AND COLUMN_NAME = 'URN') 
					BEGIN
						EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFINSTRUMENTTABLE'',''URN'',''N'')')
					END
					SELECT @COUNT1 = COUNT(1) FROM SYSOBJECTS WITH(NOLOCK) WHERE NAME = 'PMWACTIVITYTABLE'
					IF(@COUNT1 = 1)
					BEGIN
						EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFINSTRUMENTTABLE'',''ASSIGNMENTTYPE:VALIDTILL:ROUTINGSTATUS:LOCKSTATUS'',''N'')')
						EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFOBJECTPROPERTIESTABLE'',''OBJECTTYPE:PROPERTYNAME'',''N'')')
						EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFRTTASKINTERFACEASSOCTABLE'',''PROCESSINSTANCEID:WORKITEMID'',''N'')')
						EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''RTACTIVITYINTERFACEASSOCTABLE'',''PROCESSINSTANCEID:WORKITEMID'',''N'')')
						EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''ACTIVITYASSOCIATIONTABLE'',''PROCESSDEFID:ACTIVITYID:DEFINITIONTYPE:DEFINITIONID:PROCESSVARIANTID'',''N'')')
					END
					ELSE
					BEGIN
						EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFINSTRUMENTTABLE'',''VALIDTILL'',''N'')')
					END
				END
				BEGIN
					SELECT @COUNT1 = COUNT(1) FROM SYSOBJECTS WITH(NOLOCK) WHERE NAME = 'PDBACCESSLOGSUMMARY'
					IF(@COUNT1 = 1)
					BEGIN
						EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBACCESSLOGSUMMARY'',''USERINDEX'',''N'')')
						EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBACCESSLOGSUMMARY'',''USERNAME'',''N'')')
					END
				END
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFINSTRUMENTTABLE'',''PROCESSINSTANCEID:WORKITEMID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFINSTRUMENTTABLE'',''VAR_REC_1:VAR_REC_2'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFINSTRUMENTTABLE'',''PROCESSDEFID:ROUTINGSTATUS:LOCKSTATUS'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFINSTRUMENTTABLE'',''CHILDPROCESSINSTANCEID:CHILDWORKITEMID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFINSTRUMENTTABLE'',''Q_QUEUEID:ROUTINGSTATUS:LOCKSTATUS:PRIORITYLEVEL'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFINSTRUMENTTABLE'',''Q_QUEUEID:ROUTINGSTATUS:LOCKSTATUS:PROCESSINSTANCEID'',''N'')')
				EXECUTE ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFINSTRUMENTTABLE'',''Q_QUEUEID:ROUTINGSTATUS:LOCKSTATUS:ENTRYDATETIME'',''N'')')
				EXECUTE ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFINSTRUMENTTABLE'',''Q_USERID:ROUTINGSTATUS:PROCESSINSTANCEID:WORKITEMID'',''N'')')
				EXECUTE ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFINSTRUMENTTABLE'',''PROCESSDEFID:ACTIVITYID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''QUEUEHISTORYTABLE'',''PROCESSINSTANCEID:WORKITEMID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''QUEUEHISTORYTABLE'',''VAR_REC_1:VAR_REC_2'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''QUEUEHISTORYTABLE'',''PROCESSDEFID:ACTIVITYID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values 
				(''WFMESSAGETABLE'',''MESSAGEID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFMESSAGEINPROCESSTABLE'',''LOCKEDBY'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFMESSAGEINPROCESSTABLE'',''MESSAGEID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFCURRENTROUTELOGTABLE'',''LOGID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFCURRENTROUTELOGTABLE'',''ACTIONID:USERID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFCURRENTROUTELOGTABLE'',''PROCESSDEFID:ACTIONID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values 	(''WFCURRENTROUTELOGTABLE'',''PROCESSINSTANCEID:ACTIONDATETIME:LOGID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFHISTORYROUTELOGTABLE'',''LOGID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFHISTORYROUTELOGTABLE'',''ACTIONID:USERID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFHISTORYROUTELOGTABLE'',''PROCESSDEFID:ACTIONID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFHISTORYROUTELOGTABLE'',''PROCESSINSTANCEID:ACTIONDATETIME:LOGID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''SUMMARYTABLE'',''PROCESSDEFID:ACTIONID:ACTIONDATETIME:ACTIVITYID:QUEUEID:USERID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values
				(''QUEUEDEFTABLE'',''QUEUEID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''ACTIVITYTABLE'',''PROCESSDEFID:ACTIVITYID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''ACTIVITYTABLE'',''ACTIVITYTYPE'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''QUEUESTREAMTABLE'',''ACTIVITYID:STREAMID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''QUEUESTREAMTABLE'',''PROCESSDEFID:ACTIVITYID:STREAMID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values 
				(''QUEUESTREAMTABLE'',''QUEUEID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values 
				(''VARMAPPINGTABLE'',''USERDEFINEDNAME'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFESCALATIONTABLE'',''ESCALATIONMODE:SCHEDULETIME'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFACTIVITYREPORTTABLE'',''PROCESSDEFID:ACTIVITYID:ACTIONDATETIME'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFREPORTDATATABLE'',''PROCESSINSTANCEID:WORKITEMID:PROCESSDEFID:ACTIVITYID:USERID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''EXCEPTIONTABLE'',''PROCESSINSTANCEID:EXCEPTIONID:USERID:EXCPSEQID:ACTIONDATETIME'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''EXCEPTIONTABLE'',''PROCESSINSTANCEID:PROCESSDEFID:ACTIVITYID:EXCEPTIONID:EXCPSEQID:ACTIONID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''EXCEPTIONTABLE'',''PROCESSDEFID:ACTIVITYID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''TODOSTATUSTABLE'',''PROCESSINSTANCEID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''TODOSTATUSHISTORYTABLE'',''PROCESSINSTANCEID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values
				(''WFADMINLOGTABLE'',''ADMINLOGID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFADMINLOGTABLE'',''ACTIONID:USERID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''USERPREFERENCESTABLE'',''USERID:OBJECTID:OBJECTTYPE'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFATTRIBUTEMESSAGETABLE'',''MESSAGEID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFATTRIBUTEMESSAGETABLE'',''PROCESSINSTANCEID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFCOMMENTSHISTORYTABLE'',''PROCESSINSTANCEID:ACTIVITYID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values
				(''VARALIASTABLE'',''QUEUEID:ID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''VARALIASTABLE'',''QUEUEID:ALIAS:PROCESSDEFID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values 
				(''WFQUICKSEARCHTABLE'',''ALIAS'',''F'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values 
				(''WFQUICKSEARCHTABLE'',''ALIAS'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFCOMMENTSTABLE'',''PROCESSINSTANCEID:ACTIVITYID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFDATAMAPTABLE'',''PROCESSDEFID:ACTIVITYID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''WFEXPORTTABLE'',''PROCESSDEFID:ACTIVITYID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''EXCEPTIONHISTORYTABLE'',''PROCESSINSTANCEID:PROCESSDEFID:ACTIVITYID:EXCEPTIONID:EXCPSEQID:ACTIONID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''ACTIVITYASSOCIATIONTABLE'',''PROCESSDEFID:ACTIVITYID:VARIABLEID'',''N'')')
				EXECUTE ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values 
				(''WFMAILQUEUETABLE'',''TASKID'',''N'')')
				EXECUTE ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values 
				(''WFWSASYNCRESPONSETABLE'',''CORRELATIONID1'',''N'')')
				SET @vExists = 0
				SELECT @vExists = COUNT(1) FROM PDBCabinet WITH(NOLOCK) WHERE UPPER(CabinetType) = 'B'
				IF(@vExists > 0)
				BEGIN
					EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''ISDOC'',''VOLUMEID:DOCINDEX:DOCFLAG'',''N'')')
				END
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBFOLDER'',''PARENTFOLDERINDEX:UPPER(NAME)'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBFOLDER'',''PARENTFOLDERINDEX'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBFOLDER'',''NAME'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBFOLDER'',''OWNER'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBFOLDER'',''CREATEDDATETIME'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBFOLDER'',''REVISEDDATETIME'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBFOLDER'',''ACCESSEDDATETIME'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBFOLDER'',''DATADEFINITIONINDEX'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBFOLDER'',''FOLDERTYPE'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBFOLDER'',''FOLDERLOCK'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBFOLDER'',''EXPIRYDATETIME'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBFOLDER'',''FINALIZEDFLAG'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBFOLDER'',''OWNER:OWNERTYPE'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBFOLDER'',''FINALIZEDBY'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBPICKLIST'',''DATAFIELDINDEX'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBALARM'',''OBJECTID:OBJECTTYPE:ACTIONTYPE:ALARMTYPE'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBALARM'',''SETFORUSERID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''NAME'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''OWNER'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''CREATEDDATETIME'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''REVISEDDATETIME'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''ACCESSEDDATETIME'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''DATADEFINITIONINDEX'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''DOCUMENTTYPE'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''APPNAME'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''NOOFPAGES'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''DOCUMENTSIZE'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''DOCUMENTLOCK'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''DOCSTATUS'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''EXPIRYDATETIME'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''FINALIZEDFLAG'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''FINALIZEDDATETIME'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''CHECKOUTSTATUS'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''VOLUMEID:IMAGEINDEX'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''OWNER:OWNERTYPE'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''CREATEDBYUSER'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''FINALIZEDBY'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENT'',''CHECKOUTBYUSER'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENTCONTENT'',''DOCUMENTORDERNO'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENTCONTENT'',''DOCUMENTINDEX'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENTCONTENT'',''PARENTFOLDERINDEX'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENTCONTENT'',''FILEDBY'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDOCUMENTVERSION'',''IMAGEINDEX:VOLUMEINDEX'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBGROUP'',''UPPER(GROUPNAME):MAINGROUPINDEX'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBANNOTATIONVERSION'',''DOCUMENTINDEX:PAGENUMBER:ANNOTATIONNAME:ANNOTATIONVERSION'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBGLOBALINDEX'',''DATAFIELDNAME'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBLONGGLOBALINDEX'',''DATAFIELDINDEX:LONGVALUE'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBGROUPMEMBER'',''USERINDEX'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''USERSECURITY'',''USERINDEX'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBNEWAUDITTRAIL_TABLE'',''DATETIME'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBFOLDDOCLOCKSTATUS'',''FOLDDOCFLAG:FOLDDOCINDEX'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBUSER'',''UPPER(USERNAME):MAINGROUPID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBANNOTATION'',''DOCUMENTINDEX:PAGENUMBER:UPPER(ANNOTATIONNAME)'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBANNOTATIONOBJECT'',''DOCUMENTINDEX:PAGENUMBER:UPPER(NOTES)'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDATADEFINITION'',''UPPER(DATADEFNAME):GROUPID'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBDICTIONARY'',''UPPER(KEYWORD):GROUPINDEX'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBUSERADDRESSLIST'',''UPPER(LISTNAME):OWNER'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBROLES'',''UPPER(ROLENAME)'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBJOBS'',''UPPER(JOBNAME)'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBSERVICETYPE'',''UPPER(NAME)'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBREGISTEREDSERVICE'',''UPPER(NAME)'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBSTRINGGLOBALINDEX'',''FOLDDOCINDEX:FOLDDOCFLAG:DATAFIELDINDEX:UPPER(STRINGVALUE)'',''N'')')
				EXECUTE  ('Insert into WFHEALTH_INDEXLIST (TABLE_NAME,INDEX_COLUMNS,INDEX_TYPE) values (''PDBPERSONALROUTES'',''USERINDEX:UPPER(ROUTENAME)'',''N'')')
			END
		END TRY
		BEGIN CATCH
			

				--PRINT ('WFHEALTH_INDEXLIST CREATE IN CATCH BLOCK')
		END CATCH
		BEGIN TRY
			BEGIN
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBUSER'',''USERINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBFOLDER'',''FOLDERINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBDOCUMENT'',''DOCUMENTINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBANNOTATION'',''ANNOTATIONINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBANNOTATIONOBJECT'',''OBJECTID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBGLOBALINDEX'',''DATAFIELDINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBDATADEFINITION'',''DATADEFINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBDICTIONARY'',''KEYWORKINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBFORM'',''FORMINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBALARM'',''ALARMINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBGENERATEDALARM'',''ALARMDATAINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBREMINDER'',''REMINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBFTSDATA'',''FTSINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBFTSDATAVERSION'',''FTSVERSIONINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBLINKNOTESTABLE'',''NOTEINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBUSERADDRESSLIST'',''LISTINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBNEWAUDITTRAIL_TABLE'',''AUDITLOGINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBROLES'',''ROLEINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBGROUPROLES'',''GROUPROLEINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBMAKERCHECKERINFO'',''ACTIONID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBBULKOPERATIONINFO'',''BULKOPERATIONID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBPICKLIST'',''PICKLISTINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBROLEGROUP'',''GROUPROLEID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBDOCVERSIONSERIES'',''VERSIONSERIES'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBOBJECTNOTES'',''NOTEINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBREPOSITORY'',''REPID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''SDBLOCATIONTYPE'',''LOCID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''SDBACTIVITYTABLE'',''ACTIVITYID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBTRANSFEROWNER'',''ID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBUSERAPPLICATIONMAPPING'',''MAPPINGINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBADMINLOGTABLE'',''AUDITTRAILINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBCONNECTIONAUDITTRAIL'',''AUDITTRAILINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBLICENSELOGTABLE'',''AUDITTRAILINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBFTSANNOTATION'',''FTSANNOTATIONINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''CIFFORM_TABLE'',''FORMID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PDBGROUP'',''GROUPINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PROCESSDEFTABLE'',''PROCESSDEFID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFCURRENTROUTELOGTABLE'',''LOGID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''QUEUEDEFTABLE'',''QUEUEID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''PSREGISTERATIONTABLE'',''PSID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''VARALIASTABLE'',''ID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFREMINDERTABLE'',''REMINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFMAILQUEUETABLE'',''TASKID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFMESSAGETABLE'',''MESSAGEID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFATTRIBUTEMESSAGETABLE'',''MESSAGEID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFESCALATIONTABLE'',''ESCALATIONID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFJMSMESSAGETABLE'',''MESSAGEID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFQUICKSEARCHTABLE'',''VARIABLEID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFCOMMENTSTABLE'',''COMMENTSID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFROUTINGSERVERINFO'',''INFOID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFADMINLOGTABLE'',''ADMINLOGID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFAUTHORIZATIONTABLE'',''AUTHORIZATIONID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFIMPORTFILEDATA'',''FILEINDEX'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFFAILFILERECORDS'',''FAILRECORDID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFTRANSPORTDATATABLE'',''TMSLOGID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFSYSTEMSERVICESTABLE'',''SERVICEID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFQUEUECOLORTABLE'',''ID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''CONFLICTINGQUEUEUSERTABLE'',''CONFLICTID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''REVISIONNOSEQUENCE'',''SEQNO'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFPROFILETABLE'',''PROFILEID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFOBJECTLISTTABLE'',''OBJECTTYPEID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFDMSLIBRARY'',''LIBRARYID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFPROCESSVARIANTDEFTABLE'',''PROCESSVARIANTID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFVARIANTFORMTABLE'',''FORMEXTID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFUSERSKILLCATEGORYTABLE'',''CATEGORYID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFUSERSKILLDEFINITIONTABLE'',''SKILLID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFUSERRATINGLOGTABLE'',''RATINGLOGID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''GENERATELOGID'',''ID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFINITIATIONAGENTREPORTTABLE'',''LOGID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFUSERLOGTABLE'',''USERLOGID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFPROPERTIESREPORTTABLE'',''CRITERIAID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFFILTERDEFTABLE'',''FILTERID'')')
				EXECUTE  ('INSERT INTO WFHEALTHSTOREIDENTITY (TABLE_NAME, COLUMN_NAME) values (''WFSERVICEAUDITTABLE'',''LOGID'')')
			END
		END TRY
		BEGIN CATCH
		END CATCH
		END
	BEGIN
			DECLARE C_SEARCHVARIABLE CURSOR FOR SELECT COUNT(1), PROCESSDEFID FROM (SELECT DISTINCT WFS.PROCESSDEFID, WFS.FIELDNAME FROM WFSEARCHVARIABLETABLE  WFS WITH(NOLOCK), VARMAPPINGTABLE VMP WITH(NOLOCK) WHERE WFS.PROCESSDEFID = VMP.PROCESSDEFID AND WFS.FIELDNAME = VMP.USERDEFINEDNAME AND VMP.EXTOBJID = 1 AND WFS.SCOPE = 'C' AND (WFS.ACTIVITYID = 0  OR (SELECT COUNT(1) FROM ACTIVITYTABLE ACT WITH(NOLOCK) WHERE ACT.PROCESSDEFID = WFS.PROCESSDEFID AND ACT.ACTIVITYID = WFS.ACTIVITYID  AND ACT.ACTIVITYTYPE = 11) > 0) )SEARCHTABLE GROUP BY PROCESSDEFID
			BEGIN TRY
				OPEN C_SEARCHVARIABLE
				FETCH NEXT FROM C_SEARCHVARIABLE INTO @COUNT1,@PROCESSDEFID
				WHILE(@@FETCH_STATUS = 0)
				BEGIN
					SET @PROCESSNAME = DBO.FETCHPROCESSNAME(@PROCESSDEFID)
					SELECT @TABLENAME = TABLENAME FROM EXTDBCONFTABLE WITH(NOLOCK) WHERE PROCESSDEFID = @PROCESSDEFID AND EXTOBJID = 1;
					SELECT @CHECKTABLEEXIST = COUNT(1) FROM SYSOBJECTS WITH(NOLOCK) WHERE NAME = @TABLENAME
					IF(@CHECKTABLEEXIST > 0)
					BEGIN
						SELECT @TABLECOLUMNCOUNT = COUNT(1) FROM INFORMATION_SCHEMA.COLUMNS WITH(NOLOCK) WHERE TABLE_NAME = @TABLENAME
						SET @QUERY = N'SELECT @EXTTABLEROWCOUNT = COUNT(1) FROM ' +@TABLENAME+ ' WITH(NOLOCK)'
						SET @PARAMDEFINITION = N'@EXTTABLEROWCOUNT INT OUTPUT'
						EXEC SP_EXECUTESQL @QUERY, @PARAMDEFINITION, @EXTTABLEROWCOUNT = @EXTTABLEROWCOUNT OUTPUT
						SET @SEVERITY = DBO.GETSEVERITYONTABLECOUNT(@SEVERITYLOWMINCOUNT, @SEVERITYLOWMAXCOUNT, @SEVERITYMEDIUMMINCOUNT, @SEVERITYMEDIUMMAXCOUNT, @SEVERITYHIGHMINCOUNT, @SEVERITYHIGHMAXCOUNT, @SEVERITYCRITICALMINCOUNT, @EXTTABLEROWCOUNT)
						SET @CHECKCOLUMNCOUNT = DBO.GETSEARCHVARIABLECOUNT(@MINCOLUMNCOUNT1, @MAXCOLUMNCOUNT1, @MINCOLUMNCOUNT2, @MAXCOLUMNCOUNT2, @MINCOLUMNCOUNT3, @MAXCOLUMNCOUNT3, @MINCOLUMNCOUNT4, @SEARCHVARIABLEPERCENTAGE1, @SEARCHVARIABLEPERCENTAGE2, @SEARCHVARIABLEPERCENTAGE3, @SEARCHVARIABLEPERCENTAGE4, @TABLECOLUMNCOUNT)
						SET @COLUMNSEARCHPERCENTAGECOUNT = CEILING((@TABLECOLUMNCOUNT * @CHECKCOLUMNCOUNT)/100)
						SET @MINSEARCHVARIABLE = 7
						IF( @COLUMNSEARCHPERCENTAGECOUNT > @MINSEARCHVARIABLE )
						BEGIN
							SET @COUNT2 = @COLUMNSEARCHPERCENTAGECOUNT
						END
						ELSE 
						BEGIN
							SET @COUNT2 = @MINSEARCHVARIABLE
						END
						IF( @COUNT2 > 20)
						BEGIN
							SET @COUNT2 = 20
						END
						SET @PRINTDATA1 = 'Reduce the search variable count to '+CAST(@MINSEARCHVARIABLE AS VARCHAR)
						
						IF(@COUNT1 > @MINSEARCHVARIABLE)
						BEGIN
							
							EXECUTE INSERTWFHEALTHCHECKUP 1,1,@PROCESSNAME,'-','-','-','-',@COUNT1,'-',@PROCESSDEFID,'Count on search variable',1,'The count on search variables configured for a process is more than the product recommended value of search variables','To many indexes on search variable will  degrade the db performance',@PRINTDATA1
						END
						BEGIN
							DECLARE C_INDEXANDTYPE CURSOR FOR SELECT DISTINCT WFS.FIELDNAME, VMP.VARIABLEID, VMP.EXTOBJID, WFS.ACTIVITYID  FROM WFSEARCHVARIABLETABLE  WFS  WITH(NOLOCK) INNER JOIN VARMAPPINGTABLE  VMP WITH(NOLOCK) ON (WFS.PROCESSDEFID = VMP.PROCESSDEFID AND WFS.FIELDNAME = VMP.USERDEFINEDNAME) WHERE WFS.SCOPE = 'C' AND WFS.PROCESSDEFID = @PROCESSDEFID
							BEGIN
								OPEN C_INDEXANDTYPE;
								FETCH NEXT FROM C_INDEXANDTYPE INTO @FIELDNAME,  @VARIABLEID , @EXTOBJID, @ACTIVITYID
								WHILE(@@FETCH_STATUS = 0)
								BEGIN
									IF(@ACTIVITYID > 0)
									BEGIN
										SELECT @ACTIVITYTYPE = ACTIVITYTYPE FROM ACTIVITYTABLE WITH(NOLOCK) WHERE PROCESSDEFID = @PROCESSDEFID AND ACTIVITYID = @ACTIVITYID
										IF(@ACTIVITYTYPE <> 11)
										BEGIN
											GOTO SEARCHNEXT
										END
									END
									IF(@EXTOBJID = 0)
									BEGIN
										BEGIN TRY
											SELECT @SYSTEMDEFINEDNAME = SYSTEMDEFINEDNAME, @VARIABLETYPE = VARIABLETYPE FROM VARMAPPINGTABLE WITH(NOLOCK) WHERE USERDEFINEDNAME = @FIELDNAME AND PROCESSDEFID = @PROCESSDEFID 
										END TRY
										BEGIN CATCH
											SELECT @STEP_DETAILS = 'Block 2 failed because systemdefindedname  is not present for this  processdefid '+CAST(@PROCESSDEFID  AS VARCHAR)
											EXEC LogInsertCab 2, @v_scriptName,@STEP_DETAILS , 'Failed'
										END CATCH
										BEGIN
											SELECT @COUNT1 = COUNT(1) FROM ##TEMPCHECKCOLUMNEXIST WITH(NOLOCK) WHERE COLUMN_NAME = @SYSTEMDEFINEDNAME
											IF(@COUNT1 = 0)
											BEGIN
												INSERT INTO ##TEMPCHECKCOLUMNEXIST(COLUMN_NAME) VALUES(@SYSTEMDEFINEDNAME)
												SET @SEARCHAPPENDVARIABLE = 'PROCESSDEFID:'+@SYSTEMDEFINEDNAME
												SET @ORDERAPPENDVARIABLE =  'Create the missing index as '+@SEARCHAPPENDVARIABLE
												EXECUTE CHECKINDEXBYORDEREDCOLNAMES 'WFINSTRUMENTTABLE',@SEARCHAPPENDVARIABLE,@CHECKNUMBER OUTPUT
												IF(@CHECKNUMBER = 0)
												BEGIN
													EXECUTE INSERTWFHEALTHCHECKUP 3,1,@PROCESSNAME,'-','-','WFINSTRUMENTTABLE',@SYSTEMDEFINEDNAME,'-','-',@PROCESSDEFID,'Index on search variable',@SEVERITY,'Index on search variables is missing','Search will be slow when search on search variables without indexes',@ORDERAPPENDVARIABLE
												END
											END
										END
										IF (@VARIABLEID > 10005)
										BEGIN
											SET @PRINTDATA1 = 'Extended queue variable has been used in search variable : '+@SYSTEMDEFINEDNAME;
											EXECUTE INSERTWFHEALTHCHECKUP 6,1,@PROCESSNAME,'-','-','-','-',@SYSTEMDEFINEDNAME,'-',@PROCESSDEFID,'Use of extended queue variable in search variable is not recommended',@SEVERITY,'Extended Queue variable (Var_Str_9 and above) has been used in Filter.','Will result in too many index on the same table othrwise performance will be slow','Do not use the extended queue variable'
										END
										IF(@VARIABLETYPE = 10)
										BEGIN
											BEGIN TRY
												SELECT @COUNT1 = COUNT(1) FROM SYS.COLUMNS C WITH(NOLOCK) INNER JOIN SYS.TYPES T WITH(NOLOCK) ON C.USER_TYPE_ID = T.USER_TYPE_ID LEFT OUTER JOIN SYS.INDEX_COLUMNS IC WITH(NOLOCK) ON IC.OBJECT_ID = C.OBJECT_ID AND IC.COLUMN_ID = C.COLUMN_ID LEFT OUTER JOIN SYS.INDEXES I WITH(NOLOCK) ON IC.OBJECT_ID = I.OBJECT_ID AND IC.INDEX_ID = I.INDEX_ID WHERE C.OBJECT_ID = OBJECT_ID('WFINSTRUMENTTABLE') AND T.NAME = 'NVARCHAR' AND C.NAME = @SYSTEMDEFINEDNAME
											END TRY
											BEGIN CATCH
												EXEC LogInsertCab 3, @v_scriptName, 'Block 3 failed because systemdefindedname  is not present in WFInstrumentTable ', 'Failed'
											END CATCH
											IF(@COUNT1 = 0)
											BEGIN
												EXECUTE INSERTWFHEALTHCHECKUP 2,1,@PROCESSNAME,'-','-','WFINSTRUMENTTABLE',@SYSTEMDEFINEDNAME,'-','-',@PROCESSDEFID,'Datatype of text search variable should be NVARCHAR',@SEVERITY,'The datatype of the search variable should be NVARCHAR instead of VARCHAR','During the runtime of the execution query, data casting(conversion) will take time. So leads to high CPU utilization','Change the datatype to NVARCHAR'
											END
										END
									END
									ELSE IF(@EXTOBJID = 1)
									BEGIN
										BEGIN TRY
											SELECT @SYSTEMDEFINEDNAME = SYSTEMDEFINEDNAME, @VARIABLETYPE = VARIABLETYPE FROM VARMAPPINGTABLE WITH(NOLOCK) WHERE USERDEFINEDNAME = @FIELDNAME AND PROCESSDEFID = @PROCESSDEFID
										END TRY
										BEGIN CATCH
											SELECT @STEP_DETAILS = 'Block 4 failed because systemdefindedname  is not present for this  processdefid '+CAST(@PROCESSDEFID  AS VARCHAR)
											EXEC LogInsertCab 4, @v_scriptName,@STEP_DETAILS , 'Failed'
										END CATCH
										BEGIN
											--SET @SEARCHAPPENDVARIABLE = 'PROCESSDEFID:'+@SYSTEMDEFINEDNAME
											EXECUTE CHECKINDEXBYORDEREDCOLNAMES @TABLENAME,@SYSTEMDEFINEDNAME,@CHECKNUMBER OUTPUT
											IF(@CHECKNUMBER = 0)
											BEGIN
												EXECUTE INSERTWFHEALTHCHECKUP 3,1,@PROCESSNAME,'-','-',@TABLENAME,@SYSTEMDEFINEDNAME,'-','-',@PROCESSDEFID,'Index on search variable',@SEVERITY,'Index on search variables is missing','Search will be slow when search on search variables without indexes','Create the missing index'
											END
										END
										IF(@VARIABLETYPE = 10)
										BEGIN
											BEGIN TRY
												SELECT @COUNT1 = COUNT(1) FROM SYS.COLUMNS C WITH(NOLOCK) INNER JOIN SYS.TYPES T WITH(NOLOCK) ON C.USER_TYPE_ID = T.USER_TYPE_ID LEFT OUTER JOIN SYS.INDEX_COLUMNS IC WITH(NOLOCK) ON IC.OBJECT_ID = C.OBJECT_ID AND IC.COLUMN_ID = C.COLUMN_ID LEFT OUTER JOIN SYS.INDEXES I WITH(NOLOCK) ON IC.OBJECT_ID = I.OBJECT_ID AND IC.INDEX_ID = I.INDEX_ID WHERE C.OBJECT_ID = OBJECT_ID(@TABLENAME) AND T.NAME = 'NVARCHAR' AND C.NAME = @SYSTEMDEFINEDNAME
											END TRY
											BEGIN CATCH
												EXEC LogInsertCab 5, @v_scriptName, 'Block 5 failed because systemdefindedname  is not present in WFInstrumentTable ', 'Failed'
											END CATCH
											IF(@COUNT1 = 0)
											BEGIN
												EXECUTE INSERTWFHEALTHCHECKUP 2,1,@PROCESSNAME,'-','-',@TABLENAME,@SYSTEMDEFINEDNAME,'-','-',@PROCESSDEFID,'Datatype of text search variable should be NVARCHAR',@SEVERITY,'The datatype of the search variable should be NVARCHAR instead of VARCHAR','During the runtime of the execution query, data casting(conversion) will take time. So leads to high CPU utilization','Change the datatype to NVARCHAR'
											END
										END
									END
									SEARCHNEXT:
									FETCH NEXT FROM C_INDEXANDTYPE INTO @FIELDNAME, @VARIABLEID , @EXTOBJID, @ACTIVITYID
								END
								CLOSE C_INDEXANDTYPE;
								DEALLOCATE C_INDEXANDTYPE;
							END
						END
					END
					FETCH NEXT FROM C_SEARCHVARIABLE INTO @COUNT1,@PROCESSDEFID
				END
				CLOSE C_SEARCHVARIABLE
				DEALLOCATE C_SEARCHVARIABLE
				EXEC LogInsertCab 9, @v_scriptName, 'Block 1 Execute Successfully', 'Success'
			END TRY
			BEGIN CATCH
				IF(CURSOR_STATUS('GLOBAL', 'C_INDEXANDTYPE') >= -1)
				BEGIN
					IF(CURSOR_STATUS('GLOBAL', 'C_INDEXANDTYPE') > -1)
					BEGIN
						CLOSE C_INDEXANDTYPE
					END
					DEALLOCATE C_INDEXANDTYPE
				END
				IF(CURSOR_STATUS('GLOBAL', 'C_SEARCHVARIABLE') >= -1)
				BEGIN
					IF(CURSOR_STATUS('GLOBAL', 'C_SEARCHVARIABLE') > -1)
					BEGIN
						CLOSE C_SEARCHVARIABLE
					END
					DEALLOCATE C_SEARCHVARIABLE
				END
				PRINT(ERROR_MESSAGE())
				RAISERROR('Block 9 failed',16,1)
				EXEC LogInsertCab 9, @v_scriptName, 'Block 9 failed', 'Failed'
			END CATCH
		END
	BEGIN
		DECLARE C_SEARCHVARIABLE CURSOR FOR SELECT TABLE_NAME,INDEX_COLUMNS, INDEX_TYPE FROM WFHEALTH_INDEXLIST WITH(NOLOCK)
		BEGIN TRY
			OPEN C_SEARCHVARIABLE
			FETCH NEXT FROM C_SEARCHVARIABLE INTO @TABLENAME,@INDEX_COLUMNS,@INDEX_TYPE
			WHILE(@@FETCH_STATUS = 0)
			BEGIN
				EXECUTE CHECKCOLUMNEXIST @TABLENAME,@INDEX_COLUMNS,@CHECKNUMBER OUTPUT
				--PRINT('@TABLENAME : '+@TABLENAME);
				--PRINT('@INDEX_COLUMNS : '+@INDEX_COLUMNS)
				--PRINT('@CHECKNUMBER : '+CAST(@CHECKNUMBER AS VARCHAR))
				IF(@CHECKNUMBER = 0 )
				BEGIN
					EXECUTE CHECKINDEXBYORDEREDCOLNAMES @TABLENAME,@INDEX_COLUMNS,@CHECKNUMBER OUTPUT
					IF(@CHECKNUMBER = 0)
					BEGIN
						SET @QUERY = N'SELECT @EXTTABLEROWCOUNT = COUNT(1) FROM ' +@TABLENAME+ ' WITH(NOLOCK)'
						SET @PARAMDEFINITION = N'@EXTTABLEROWCOUNT INT OUTPUT'
						EXEC SP_EXECUTESQL @QUERY, @PARAMDEFINITION, @EXTTABLEROWCOUNT = @EXTTABLEROWCOUNT OUTPUT
						SET @SEVERITY = DBO.GETSEVERITYONTABLECOUNT(@SEVERITYLOWMINCOUNT, @SEVERITYLOWMAXCOUNT, @SEVERITYMEDIUMMINCOUNT, @SEVERITYMEDIUMMAXCOUNT, @SEVERITYHIGHMINCOUNT, @SEVERITYHIGHMAXCOUNT, @SEVERITYCRITICALMINCOUNT, @EXTTABLEROWCOUNT)
						EXECUTE INSERTWFHEALTHCHECKUP 4,1,'-','-','-',@TABLENAME,@INDEX_COLUMNS,'-','-','-','Index is Missing',@SEVERITY,'Product table index is missing','Product operations will be slow','Create the missing index'
					END
				END
				FETCH NEXT FROM C_SEARCHVARIABLE INTO @TABLENAME,@INDEX_COLUMNS,@INDEX_TYPE
			END
			CLOSE C_SEARCHVARIABLE
			DEALLOCATE C_SEARCHVARIABLE
			EXEC LogInsertCab 27, @v_scriptName, 'Block 27 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
			IF(CURSOR_STATUS('GLOBAL', 'C_SEARCHVARIABLE') >= -1)
			BEGIN
				IF(CURSOR_STATUS('GLOBAL', 'C_SEARCHVARIABLE') > -1)
				BEGIN
					CLOSE C_SEARCHVARIABLE
				END
				DEALLOCATE C_SEARCHVARIABLE
			END
			RAISERROR('Exception in block 27 ',16,1)
			EXEC LogInsertCab 27, @v_scriptName, 'Block 27 failed because WFHealth_IndexList table is not present', 'Failed'
		END CATCH
	END
	BEGIN
			BEGIN TRY
			BEGIN
				BEGIN
					SELECT @COUNT1 = OBJECT_ID('TEMPDB..##TEMPCHECKCOLUMNEXIST')
					IF(@COUNT1 > 0)
					BEGIN
						EXECUTE ('TRUNCATE TABLE ##TEMPCHECKCOLUMNEXIST')
					END
						--CREATE TABLE ##TEMPCHECKCOLUMNEXIST(COLUMN_NAME NVARCHAR(512))
				END
			END
			DECLARE C_SEARCHVARIABLE CURSOR FOR SELECT QST.PROCESSDEFID, PDT.PROCESSNAME, QDT.QUEUENAME, QDT.QUEUEID, QDT.QUEUEFILTER  FROM QUEUEDEFTABLE QDT WITH(NOLOCK), QUEUESTREAMTABLE QST WITH(NOLOCK), PROCESSDEFTABLE PDT WITH(NOLOCK) WHERE QDT.QUEUEID = QST.QUEUEID AND QST.PROCESSDEFID = PDT.PROCESSDEFID AND QDT.QUEUEFILTER IS NOT NULL AND QDT.QUEUEFILTER <> ''
			OPEN C_SEARCHVARIABLE
			FETCH NEXT FROM C_SEARCHVARIABLE INTO  @PROCESSDEFID, @PROCESSNAME, @QUEUENAME, @QUEUEID, @QUEUEFILTER
			WHILE(@@FETCH_STATUS = 0)
			BEGIN
				--print('@QUEUEFILTER : '+@QUEUEFILTER)
				SET @SUBOUT1 = ''
				SET @SUBOUT2 = ''
				EXECUTE WFCOLUMNRETURN @QUEUEFILTER, @SUBOUT1 OUTPUT, @SUBOUT2 OUTPUT
				--print('@subout1 : '+@SUBOUT1)
				--print('@SUBOUT2 : '+@SUBOUT2)
				IF(@SUBOUT2 IS NOT NULL AND @SUBOUT2 <> '')
				BEGIN
					--print('@SUBOUT2 INSIDE: '+@SUBOUT2)
						SET @QUERY = N'SELECT @EXTTABLEROWCOUNT = COUNT(1) FROM WFINSTRUMENTTABLE WITH(NOLOCK)'
						SET @PARAMDEFINITION = N'@EXTTABLEROWCOUNT INT OUTPUT'
						EXEC SP_EXECUTESQL @QUERY, @PARAMDEFINITION, @EXTTABLEROWCOUNT = @EXTTABLEROWCOUNT OUTPUT
						SET @SEVERITY = DBO.GETSEVERITYONTABLECOUNT(@SEVERITYLOWMINCOUNT, @SEVERITYLOWMAXCOUNT, @SEVERITYMEDIUMMINCOUNT, @SEVERITYMEDIUMMAXCOUNT, @SEVERITYHIGHMINCOUNT, @SEVERITYHIGHMAXCOUNT, @SEVERITYCRITICALMINCOUNT, @EXTTABLEROWCOUNT)
						--SET @PRINTDATA1 = 'Extended queue variable has been used in filter : '+@EXTENDEDVARIABLE
						EXECUTE INSERTWFHEALTHCHECKUP 6,1, @PROCESSNAME,'-',@QUEUENAME,@QUEUEID ,'-',@QUEUEFILTER,'-',@PROCESSDEFID,'Do not use the extended queue variable',@SEVERITY,'Extended Queue variable (Var_Str_9 and above) has been used in Filter.Workitem list operation will be slow','Will result in too many index on the same table othrwise performance will be slow','Remove extedned Queue variable from the filter. Used earlier queue variables (VAR_STR_8 and below)'
				END
				IF(@SUBOUT1 IS NOT NULL  AND @SUBOUT1 <> '' AND @SUBOUT2 = '')
				BEGIN
					SELECT @COUNT1 = COUNT(1) FROM ##TEMPCHECKCOLUMNEXIST WITH(NOLOCK) WHERE COLUMN_NAME = @SUBOUT1
					IF(@COUNT1 = 0) 
					BEGIN
						--print('@subout1 INSDIE: '+@SUBOUT1)
						INSERT INTO ##TEMPCHECKCOLUMNEXIST(COLUMN_NAME) VALUES(@SUBOUT1)
						SET @ORDERAPPENDVARIABLE = 'Q_QUEUEID:'+@SUBOUT1
						--print('@ORDERAPPENDVARIABLE :'+@ORDERAPPENDVARIABLE)
						--SET @COLUMNAPPENDVAR = 'Q_QUEUEID:'+@EXTENDEDVARIABLE2
						EXECUTE CHECKINDEXONORDERCOLUMN 'WFINSTRUMENTTABLE', @ORDERAPPENDVARIABLE, @CHECKNUMBER OUTPUT
						
						SET @SEARCHAPPENDVARIABLE = 'The column '+@SUBOUT1+' used in filter'
						--print('@CHECKNUMBER :'+cast(@CHECKNUMBER as varchar))
						--print('@extendedvariable :'+@EXTENDEDVARIABLE)
						SET @PRINTDATA1 = 'Create the missing index like '+@ORDERAPPENDVARIABLE
						--EXECUTE CHECKINDEXBYORDEREDCOLNAMES 'WFINSTRUMENTTABLE',@COLUMNNAME,@CHECKNUMBER OUTPUT
						IF(@CHECKNUMBER = 0)
						BEGIN
							SET @QUERY = N'SELECT @EXTTABLEROWCOUNT = COUNT(1) FROM WFINSTRUMENTTABLE WITH(NOLOCK)'
							SET @PARAMDEFINITION = N'@EXTTABLEROWCOUNT INT OUTPUT'
							EXEC SP_EXECUTESQL @QUERY, @PARAMDEFINITION, @EXTTABLEROWCOUNT = @EXTTABLEROWCOUNT OUTPUT
							SET @SEVERITY = DBO.GETSEVERITYONTABLECOUNT(@SEVERITYLOWMINCOUNT, @SEVERITYLOWMAXCOUNT, @SEVERITYMEDIUMMINCOUNT, @SEVERITYMEDIUMMAXCOUNT, @SEVERITYHIGHMINCOUNT, @SEVERITYHIGHMAXCOUNT, @SEVERITYCRITICALMINCOUNT, @EXTTABLEROWCOUNT)
							EXECUTE INSERTWFHEALTHCHECKUP 16,1,'-','-',@QUEUENAME,@QUEUEID,'WFINSTRUMENTTABLE',@SUBOUT1,'-','-','Index is Missing',@SEVERITY,@SEARCHAPPENDVARIABLE,'Queue click and batching will be slow',@PRINTDATA1
							--EXECUTE INSERTWFHEALTHCHECKUP 16,1,@PROCESSNAME,'-',@QUEUENAME,@PROCESSDEFID ,@QUEUEFILTER,@QUEUEID,'-','-','Check if the required indexes are present',@SEVERITY,'Index  missing on the columns used in the filter','Will result slow db performance',@PRINTDATA1
						END
					END
				END
				IF(@SUBOUT1 = '' AND @SUBOUT2 = '')
				BEGIN
					--PRINT('INSIDE EXTERNAL')
						EXECUTE INSERTWFHEALTHCHECKUP 5,1,@PROCESSNAME,'-',@QUEUENAME,@PROCESSDEFID ,@QUEUEFILTER,@QUEUEID,'-','-','Check if the required indexes are present',0,'Index missing on the columns used in the filter','Will result slow db performance','Create the index'
				END
				FETCH NEXT FROM C_SEARCHVARIABLE INTO @PROCESSDEFID, @PROCESSNAME, @QUEUENAME, @QUEUEID, @QUEUEFILTER
			END
			CLOSE C_SEARCHVARIABLE
			DEALLOCATE C_SEARCHVARIABLE
			EXEC LogInsertCab 48, @v_scriptName, 'Block 48 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
		SET @ERRORMESSAGE = 'Exception in block 48. ' + ERROR_MESSAGE()
			IF(CURSOR_STATUS('GLOBAL', 'C_SEARCHVARIABLE') >= -1)
			BEGIN
				IF(CURSOR_STATUS('GLOBAL', 'C_SEARCHVARIABLE') > -1)
				BEGIN
					CLOSE C_SEARCHVARIABLE
				END
				DEALLOCATE C_SEARCHVARIABLE
			END
			RAISERROR(@ERRORMESSAGE,16,1)
			EXEC LogInsertCab 48, @v_scriptName, 'Block 48 failed because QueueDefTable is not present', 'Failed'
		END CATCH
	END
	BEGIN 
		BEGIN TRY
			DECLARE C_SEARCHVARIABLE CURSOR FOR SELECT DISTINCT QUT.QUEUEID,QUT.USERID,QUT.QUERYFILTER, PDT.PROCESSNAME, QDT.QUEUENAME, PDB.USERNAME, QST.PROCESSDEFID FROM QUEUEUSERTABLE QUT WITH(NOLOCK), QUEUESTREAMTABLE QST WITH(NOLOCK), PROCESSDEFTABLE PDT WITH(NOLOCK), QUEUEDEFTABLE QDT WITH(NOLOCK), PDBUSER PDB WITH(NOLOCK)  WHERE QUT.QUEUEID = QST.QUEUEID AND QST.PROCESSDEFID = PDT.PROCESSDEFID AND QUT.QUEUEID = QDT.QUEUEID AND QUT.USERID = PDB.USERINDEX AND ( QUT.QUERYFILTER IS NOT NULL AND QUT.QUERYFILTER <> '' ) AND ( QUT.ASSOCIATIONTYPE = 0 OR QUT.ASSOCIATIONTYPE IS NULL)
			OPEN C_SEARCHVARIABLE
			FETCH NEXT FROM C_SEARCHVARIABLE INTO @QUEUEID,@USERID,@QUERYFILTER, @PROCESSNAME, @QUEUENAME, @USERNAME, @PROCESSDEFID
			WHILE(@@FETCH_STATUS = 0)
			BEGIN
				SET @SUBOUT1 = ''
				SET @SUBOUT2 = ''
				EXECUTE WFCOLUMNRETURN @QUERYFILTER, @SUBOUT1 OUTPUT, @SUBOUT2 OUTPUT
				IF(@SUBOUT2 IS NOT NULL AND @SUBOUT2 <> '')
				BEGIN
					SET @QUERY = N'SELECT @EXTTABLEROWCOUNT = COUNT(1) FROM WFINSTRUMENTTABLE WITH(NOLOCK)'
					SET @PARAMDEFINITION = N'@EXTTABLEROWCOUNT INT OUTPUT'
					EXEC SP_EXECUTESQL @QUERY, @PARAMDEFINITION, @EXTTABLEROWCOUNT = @EXTTABLEROWCOUNT OUTPUT
					SET @SEVERITY = DBO.GETSEVERITYONTABLECOUNT(@SEVERITYLOWMINCOUNT, @SEVERITYLOWMAXCOUNT, @SEVERITYMEDIUMMINCOUNT, @SEVERITYMEDIUMMAXCOUNT, @SEVERITYHIGHMINCOUNT, @SEVERITYHIGHMAXCOUNT, @SEVERITYCRITICALMINCOUNT, @EXTTABLEROWCOUNT)
					SET @PRINTDATA1 = 'Extended queue variable has been used in filter : '+@EXTENDEDVARIABLE
					EXECUTE INSERTWFHEALTHCHECKUP 6,1, @PROCESSNAME,'-',@QUEUENAME,@QUEUEID ,@USERID,@QUERYFILTER,@USERNAME,@PROCESSDEFID,'Do not use the extended queue variable',@SEVERITY,'Extended Queue variable (Var_Str_9 and above) has been used in Filter.Workitem list operation will be slow','Will result in too many index on the same table othrwise performance will be slow','Remove extedned Queue variable from the filter. Used earlier queue variables (VAR_STR_8 and below)'
				END
				
				IF(@SUBOUT1 IS NOT NULL  AND @SUBOUT1 <> '' AND @SUBOUT2 = '')
				BEGIN
					SELECT @COUNT1 = COUNT(1) FROM ##TEMPCHECKCOLUMNEXIST WITH(NOLOCK) WHERE COLUMN_NAME = @SUBOUT1
					IF(@COUNT1 = 0) 
					BEGIN
							INSERT INTO ##TEMPCHECKCOLUMNEXIST(COLUMN_NAME) VALUES(@SUBOUT1)
						SET @ORDERAPPENDVARIABLE = 'Q_QUEUEID:'+@SUBOUT1
						--SET @COLUMNAPPENDVAR = 'Q_QUEUEID:'+@EXTENDEDVARIABLE2
						EXECUTE CHECKINDEXONORDERCOLUMN 'WFINSTRUMENTTABLE', @ORDERAPPENDVARIABLE, @CHECKNUMBER OUTPUT
						SET @PRINTDATA1 = 'Create the missing index like '+@ORDERAPPENDVARIABLE
						--EXECUTE CHECKINDEXBYORDEREDCOLNAMES 'WFINSTRUMENTTABLE',@COLUMNNAME,@CHECKNUMBER OUTPUT
						SET @SEARCHAPPENDVARIABLE = 'The column '+@SUBOUT1+' used in filter'
						IF(@CHECKNUMBER = 0)
						BEGIN
							SET @QUERY = N'SELECT @EXTTABLEROWCOUNT = COUNT(1) FROM WFINSTRUMENTTABLE WITH(NOLOCK)'
							SET @PARAMDEFINITION = N'@EXTTABLEROWCOUNT INT OUTPUT'
							EXEC SP_EXECUTESQL @QUERY, @PARAMDEFINITION, @EXTTABLEROWCOUNT = @EXTTABLEROWCOUNT OUTPUT
							SET @SEVERITY = DBO.GETSEVERITYONTABLECOUNT(@SEVERITYLOWMINCOUNT, @SEVERITYLOWMAXCOUNT, @SEVERITYMEDIUMMINCOUNT, @SEVERITYMEDIUMMAXCOUNT, @SEVERITYHIGHMINCOUNT, @SEVERITYHIGHMAXCOUNT, @SEVERITYCRITICALMINCOUNT, @EXTTABLEROWCOUNT)
							--EXECUTE INSERTWFHEALTHCHECKUP 16,1,@PROCESSNAME,'-',@QUEUENAME,@QUEUEID,@USERID,@QUERYFILTER,@USERNAME,@PROCESSDEFID,'Check if the required indexes are present',@SEVERITY,'Index missing on the columns used in the filter','Will result slow db performance',@PRINTDATA1	
							EXECUTE INSERTWFHEALTHCHECKUP 16,1,'-','-',@QUEUENAME,@QUEUEID,'WFINSTRUMENTTABLE',@SUBOUT1,'-','-','Index is Missing',@SEVERITY,@SEARCHAPPENDVARIABLE,'Queue click and batching will be slow',@PRINTDATA1
						END
					END
				END
				IF(@SUBOUT1 = '' AND @SUBOUT2 = '')
				BEGIN
					EXECUTE INSERTWFHEALTHCHECKUP 6,1,@PROCESSNAME,'-',@QUEUENAME,@QUEUEID,@USERID,@QUERYFILTER,@USERNAME,@PROCESSDEFID,'Check if the required indexes are present',0,'Index missing on the columns used in the filter','Will result slow db performance','Create the missing index'
				END
				FETCH NEXT FROM C_SEARCHVARIABLE INTO @QUEUEID,@USERID,@QUERYFILTER, @PROCESSNAME, @QUEUENAME, @USERNAME, @PROCESSDEFID
			END
			CLOSE C_SEARCHVARIABLE
			DEALLOCATE C_SEARCHVARIABLE
			EXEC LogInsertCab 49, @v_scriptName, 'Block 49 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
			IF(CURSOR_STATUS('GLOBAL', 'C_SEARCHVARIABLE') >= -1)
			BEGIN
				IF(CURSOR_STATUS('GLOBAL', 'C_SEARCHVARIABLE') > -1)
				BEGIN
					CLOSE C_SEARCHVARIABLE
				END
				DEALLOCATE C_SEARCHVARIABLE
			END
			RAISERROR('Exception in block 49',16,1)
			EXEC LogInsertCab 49, @v_scriptName, 'Block 49 failed because QueueUserTable is not present', 'Failed'
		END CATCH
	END
	BEGIN
		BEGIN TRY
			DECLARE C_SEARCHVARIABLE CURSOR FOR SELECT DISTINCT QUT.QUEUEID,QUT.USERID,QUT.QUERYFILTER, PDT.PROCESSNAME, QDT.QUEUENAME, PDB.GROUPNAME, QST.PROCESSDEFID FROM QUEUEUSERTABLE QUT WITH(NOLOCK), QUEUESTREAMTABLE QST WITH(NOLOCK), PROCESSDEFTABLE PDT WITH(NOLOCK), QUEUEDEFTABLE QDT WITH(NOLOCK), PDBGROUP PDB WITH(NOLOCK)  WHERE QUT.QUEUEID = QST.QUEUEID AND QST.PROCESSDEFID = PDT.PROCESSDEFID AND QUT.QUEUEID = QDT.QUEUEID AND QUT.USERID = PDB.GROUPINDEX AND ( QUT.QUERYFILTER IS NOT NULL AND QUT.QUERYFILTER <> '' ) AND ( QUT.ASSOCIATIONTYPE = 1 OR QUT.ASSOCIATIONTYPE IS NULL)
			OPEN C_SEARCHVARIABLE
			FETCH NEXT FROM C_SEARCHVARIABLE INTO @QUEUEID,@USERID,@QUERYFILTER, @PROCESSNAME, @QUEUENAME, @GROUPNAME, @PROCESSDEFID
			WHILE(@@FETCH_STATUS = 0)
			BEGIN
				SET @SUBOUT1 = ''
				SET @SUBOUT2 = ''
				EXECUTE WFCOLUMNRETURN @QUERYFILTER, @SUBOUT1 OUTPUT, @SUBOUT2 OUTPUT
				IF(@SUBOUT2 IS NOT NULL AND @SUBOUT2 <> '')
				BEGIN
						/*EXECUTE INSERTWFHEALTHCHECKUP 14,1,'-','-',@QUEUENAME,@QUEUEID ,@QUERYFILTER,@EXTENDEDVARIABLE,'-','-','Do not use the extended queue variable',3,'Do not use the extended queue variable','It is recommended from the product do not use the extended queue variable in filter','Remove the extended queue variable from the filter'	*/
						
						SET @QUERY = N'SELECT @EXTTABLEROWCOUNT = COUNT(1) FROM WFINSTRUMENTTABLE WITH(NOLOCK)'
						SET @PARAMDEFINITION = N'@EXTTABLEROWCOUNT INT OUTPUT'
						EXEC SP_EXECUTESQL @QUERY, @PARAMDEFINITION, @EXTTABLEROWCOUNT = @EXTTABLEROWCOUNT OUTPUT
						SET @SEVERITY = DBO.GETSEVERITYONTABLECOUNT(@SEVERITYLOWMINCOUNT, @SEVERITYLOWMAXCOUNT, @SEVERITYMEDIUMMINCOUNT, @SEVERITYMEDIUMMAXCOUNT, @SEVERITYHIGHMINCOUNT, @SEVERITYHIGHMAXCOUNT, @SEVERITYCRITICALMINCOUNT, @EXTTABLEROWCOUNT)
						
						SET @PRINTDATA1 = 'Extended queue variable has been used in filter : '+@EXTENDEDVARIABLE
						EXECUTE INSERTWFHEALTHCHECKUP 6,1, @PROCESSNAME,'-',@QUEUENAME,@QUEUEID ,@USERID,@QUERYFILTER,@GROUPNAME,@PROCESSDEFID,'Do not use the extended queue variable',@SEVERITY,'Extended Queue variable (Var_Str_9 and above) has been used in Filter.Workitem list operation will be slow','Will result in too many index on the same table othrwise performance will be slow','Remove extedned Queue variable from the filter. Used earlier queue variables (VAR_STR_8 and below)'
				END
				
				IF(@SUBOUT1 IS NOT NULL  AND @SUBOUT1 <> '' AND @SUBOUT2 = '')
				BEGIN
					SELECT @COUNT1 = COUNT(1) FROM ##TEMPCHECKCOLUMNEXIST WITH(NOLOCK) WHERE COLUMN_NAME = @SUBOUT1
					IF(@COUNT1 = 0) 
					BEGIN
						INSERT INTO ##TEMPCHECKCOLUMNEXIST(COLUMN_NAME) VALUES(@SUBOUT1)
						SET @ORDERAPPENDVARIABLE = 'Q_QUEUEID:'+@SUBOUT1
						--SET @COLUMNAPPENDVAR = 'Q_QUEUEID:'+@EXTENDEDVARIABLE2
						EXECUTE CHECKINDEXONORDERCOLUMN 'WFINSTRUMENTTABLE', @ORDERAPPENDVARIABLE, @CHECKNUMBER OUTPUT
						SET @SEARCHAPPENDVARIABLE = 'The column '+@SUBOUT1+' used in filter'
						SET @SEARCHAPPENDVARIABLE = 'The column '+@SUBOUT1+' used in filter'
						--print('@CHECKNUMBER :'+cast(@CHECKNUMBER as varchar))
						--print('@extendedvariable :'+@EXTENDEDVARIABLE)
						SET @PRINTDATA1 = 'Create the missing index like '+@ORDERAPPENDVARIABLE
						--EXECUTE CHECKINDEXBYORDEREDCOLNAMES 'WFINSTRUMENTTABLE',@COLUMNNAME,@CHECKNUMBER OUTPUT
						IF(@CHECKNUMBER = 0)
						BEGIN
							SET @QUERY = N'SELECT @EXTTABLEROWCOUNT = COUNT(1) FROM WFINSTRUMENTTABLE WITH(NOLOCK)'
							SET @PARAMDEFINITION = N'@EXTTABLEROWCOUNT INT OUTPUT'
							EXEC SP_EXECUTESQL @QUERY, @PARAMDEFINITION, @EXTTABLEROWCOUNT = @EXTTABLEROWCOUNT OUTPUT
							SET @SEVERITY = DBO.GETSEVERITYONTABLECOUNT(@SEVERITYLOWMINCOUNT, @SEVERITYLOWMAXCOUNT, @SEVERITYMEDIUMMINCOUNT, @SEVERITYMEDIUMMAXCOUNT, @SEVERITYHIGHMINCOUNT, @SEVERITYHIGHMAXCOUNT, @SEVERITYCRITICALMINCOUNT, @EXTTABLEROWCOUNT)
							--EXECUTE INSERTWFHEALTHCHECKUP 16,1,@PROCESSNAME,'-',@QUEUENAME,@QUEUEID,@USERID,@QUERYFILTER, @GROUPNAME, @PROCESSDEFID,'Check if the required indexes are present',0,'Index may missing on the columns used in the filter','Queue operation will be slow if indexes are missing',@PRINTDATA1
							EXECUTE INSERTWFHEALTHCHECKUP 16,1,'-','-',@QUEUENAME,@QUEUEID,'WFINSTRUMENTTABLE',@SUBOUT1,'-','-','Index is Missing',@SEVERITY,@SEARCHAPPENDVARIABLE,'Queue click and batching will be slow',@PRINTDATA1
						END
					END
				END
				IF(@SUBOUT1 = '' AND @SUBOUT2 = '')
				BEGIN
					EXECUTE INSERTWFHEALTHCHECKUP 6,1,@PROCESSNAME,'-',@QUEUENAME,@QUEUEID,@USERID,@QUERYFILTER, @GROUPNAME, @PROCESSDEFID,'Check if the required indexes are present',0,'Index missing on the columns used in the filter','Queue operation will be slow if indexes are missing','Create the index'	
				END
				FETCH NEXT FROM C_SEARCHVARIABLE INTO @QUEUEID,@USERID,@QUERYFILTER, @PROCESSNAME, @QUEUENAME, @GROUPNAME, @PROCESSDEFID
			END
			CLOSE C_SEARCHVARIABLE
			DEALLOCATE C_SEARCHVARIABLE
			EXEC LogInsertCab 50, @v_scriptName, 'Block 50 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
			IF(CURSOR_STATUS('GLOBAL', 'C_SEARCHVARIABLE') >= -1)
			BEGIN
				IF(CURSOR_STATUS('GLOBAL', 'C_SEARCHVARIABLE') > -1)
				BEGIN
					CLOSE C_SEARCHVARIABLE
				END
				DEALLOCATE C_SEARCHVARIABLE
			END
			RAISERROR('Exception in block 50',16,1)
			EXEC LogInsertCab 50, @v_scriptName, 'Block 50 failed because QueueUserTable is not present', 'Failed'
		END CATCH
	END
	
	BEGIN
		BEGIN TRY
			SET @PRINTDATA1 = 'Workitems older than '+@ARGUMENT3+' days are pending for data archival'
			DECLARE C_CURSOR CURSOR FOR SELECT COUNT(1), PROCESSDEFID FROM WFINSTRUMENTTABLE WITH(NOLOCK) WHERE PROCESSINSTANCESTATE = 4 OR PROCESSINSTANCESTATE = 5 OR PROCESSINSTANCESTATE = 6 AND ENTRYDATETIME < ( GETDATE() - CAST(@ARGUMENT3 AS INTEGER)) GROUP BY PROCESSDEFID
			BEGIN
				OPEN C_CURSOR
				FETCH NEXT FROM C_CURSOR INTO @COUNT1, @PROCESSDEFID
				WHILE(@@FETCH_STATUS = 0)
				BEGIN
					IF(@COUNT1 > 0)
					BEGIN
						SET @SEVERITY = DBO.GETSEVERITYONCOUNT(@COUNT1, 25000, 15000, 5000)
						IF(@SEVERITY != 0)
						BEGIN
							SET @PROCESSNAME = DBO.FETCHPROCESSNAME(@PROCESSDEFID)
							EXECUTE INSERTWFHEALTHCHECKUP 7,1,@PROCESSNAME,'-','-','WFINSTRUMENTTABLE','-',@COUNT1,'-',@PROCESSDEFID,'Checking WFTransferData execution', @SEVERITY, @PRINTDATA1,'All the queries on the product table will be slow','Execute WFTransferData'
						END
					END
					FETCH NEXT FROM C_CURSOR INTO @COUNT1, @PROCESSDEFID
				END
			END
			CLOSE C_CURSOR
			DEALLOCATE C_CURSOR
			EXEC LogInsertCab 31, @v_scriptName, 'Block 31 execute successfully', 'Success'
		END TRY
		
		--END TRY
		BEGIN CATCH
			IF(CURSOR_STATUS('GLOBAL', 'C_CURSOR') >= -1)
			BEGIN
				IF(CURSOR_STATUS('GLOBAL', 'C_CURSOR') > -1)
				BEGIN
					CLOSE C_CURSOR
				END
				DEALLOCATE C_CURSOR
			END
			RAISERROR('Exception in block 31 ',16,1)
			EXEC LogInsertCab 31, @v_scriptName, 'Block 31 failed because wfinstrumenttable is not present', 'Failed'
		END CATCH
	END
	
	
	BEGIN
		BEGIN TRY
			DECLARE C_CURSOR CURSOR FOR SELECT PROCESSDEFID,ACTIVITYID,ACTIVITYNAME, QUEUENAME,COUNT(1) FROM WFINSTRUMENTTABLE WITH(NOLOCK) WHERE ENTRYDATETIME < ( GETDATE() - 90) GROUP BY PROCESSDEFID,ACTIVITYID,ACTIVITYNAME, QUEUENAME;
			BEGIN
				OPEN C_CURSOR
				FETCH NEXT FROM C_CURSOR INTO @PROCESSDEFID,@ACTIVITYID,@ACTIVITYNAME, @QUEUENAME, @COUNT1
				WHILE(@@FETCH_STATUS = 0)
				BEGIN
					BEGIN TRY
						SELECT @ACTIVITYTYPE = ACTIVITYTYPE FROM ACTIVITYTABLE WITH(NOLOCK) WHERE PROCESSDEFID = @PROCESSDEFID AND ACTIVITYNAME = @ACTIVITYNAME AND ACTIVITYID = @ACTIVITYID;
					END TRY
					BEGIN CATCH
						RAISERROR('Exception in block 32 ',16,1)
						SELECT @STEP_DETAILS = 'Block 32 failed because activitytype is not present for the activity '+@ACTIVITYNAME
						EXEC LogInsertCab 32, @v_scriptName, @STEP_DETAILS , 'Failed'
					END CATCH
					IF(@ACTIVITYTYPE <> 2 AND @ACTIVITYTYPE <> 3 AND @ACTIVITYTYPE IS NOT NULL)
					BEGIN
						SET @PROCESSNAME = DBO.FETCHPROCESSNAME(@PROCESSDEFID)
						SET @SEVERITY = DBO.GETSEVERITYONCOUNT(@COUNT1, 10000, 5000, 1000);
						IF(@COUNT1 > 1000)
						BEGIN
							EXECUTE INSERTWFHEALTHCHECKUP 8,1,@PROCESSNAME,@ACTIVITYNAME,@QUEUENAME,'WFINSTRUMENTTABLE','-',@COUNT1,'-',@PROCESSDEFID,'More than 90 days',@SEVERITY,'Workitems are pending on the same activity for more than 90 days','These workitems cannot be archived to historytable until moved to exit or discarded','It will increase the workitems count in the system. So either complete these workitems in finite time or move these workitems to Work Exit or Discard via Adhoc route or some DB script';
						END
					END
					FETCH NEXT FROM C_CURSOR INTO @PROCESSDEFID,@ACTIVITYID,@ACTIVITYNAME, @QUEUENAME, @COUNT1
				END
				CLOSE C_CURSOR
				DEALLOCATE C_CURSOR
				EXEC LogInsertCab 33, @v_scriptName, 'Block 33 execute successfully', 'Success'
			END
		END TRY
		BEGIN CATCH
			IF(CURSOR_STATUS('GLOBAL', 'C_CURSOR') >= -1)
			BEGIN
				IF(CURSOR_STATUS('GLOBAL', 'C_CURSOR') > -1)
				BEGIN
					CLOSE C_CURSOR
				END
				DEALLOCATE C_CURSOR
			END
			RAISERROR('Exception in block 33',16,1)
			EXEC LogInsertCab 33, @v_scriptName, 'Block 33 failed because wfinstrumenttable is not present', 'Failed'
		END CATCH
	END
	
	BEGIN
		BEGIN TRY
			SELECT @COUNT1 = COUNT(1) FROM WFINSTRUMENTTABLE WITH(NOLOCK);
			EXEC LogInsertCab 34, @v_scriptName, 'Block 34 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
			RAISERROR('Exception in block 34',16,1)
			EXEC LogInsertCab 34, @v_scriptName, 'Block 34 failed because wfinstrumenttable is not present', 'Failed'
		END CATCH
		SET @SEVERITY = DBO.GETSEVERITYONCOUNT(@COUNT1, 1000000, 500000, 100000);
		IF( @COUNT1 > 50000)
		BEGIN
			EXECUTE INSERTWFHEALTHCHECKUP 9,1,'-','-','-','WFINSTRUMENTTABLE','-',@COUNT1,'-','-','Count on WFINSTRUMENTTABLE',@SEVERITY,'Transaction Table count is high','Verify if its Normal with current system load and plan archival accordingly','-';
		END
		BEGIN TRY
			SELECT @COUNT1 = COUNT(1) FROM QUEUEHISTORYTABLE WITH(NOLOCK);
			EXEC LogInsertCab 35, @v_scriptName, 'Block 35 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
			RAISERROR('Exception in block 35',16,1)
			EXEC LogInsertCab 35, @v_scriptName, 'Block 35 failed because QueueHistoryTable is not present', 'Failed'
		END CATCH
		SET @SEVERITY = DBO.GETSEVERITYONCOUNT(@COUNT1, 1000000, 500000, 100000);
		IF( @COUNT1 > 50000)
		BEGIN
			EXECUTE INSERTWFHEALTHCHECKUP 9,1,'-','-','-','QUEUEHISTORYTABLE','-',@COUNT1,'-','-','Count on QUEUEHISTORYTABLE',@SEVERITY,'Product Transaction Table count is high','Transaction Table count is high','Verify if its Normal with current system load and plan archival accordingly';
		END
		BEGIN TRY
			SELECT @COUNT1 = COUNT(1) FROM WFMESSAGETABLE WITH(NOLOCK);
		EXEC LogInsertCab 36, @v_scriptName, 'Block 36 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
			RAISERROR('Exception in block 36 ',16,1)
			EXEC LogInsertCab 36, @v_scriptName, 'Block 36 failed because WFMessageTable is not present', 'Failed'
		END CATCH
		SET @SEVERITY = DBO.GETSEVERITYONCOUNT(@COUNT1, 1000000, 500000, 100000);
		IF( @COUNT1 > 50000)
		BEGIN
			EXECUTE INSERTWFHEALTHCHECKUP 9,1,'-','-','-','WFMESSAGETABLE','-',@COUNT1,'-','-','Count on WFMESSAGETABLE',@SEVERITY,'Transaction Table count is high','Verify if its Normal with current system load and plan archival accordingly','-';
		END
		BEGIN TRY
			SELECT @COUNT1 = COUNT(1) FROM WFCURRENTROUTELOGTABLE WITH(NOLOCK);
			EXEC LogInsertCab 37, @v_scriptName, 'Block 37 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
			RAISERROR('Exception in block 37 ',16,1)
			EXEC LogInsertCab 37, @v_scriptName, 'Block 37 failed because WFCurrentRouteLogTable is not present', 'Failed'
		END CATCH
		SET @SEVERITY = DBO.GETSEVERITYONCOUNT(@COUNT1, 1000000, 500000, 100000);
		IF( @COUNT1 > 50000)
		BEGIN
			EXECUTE INSERTWFHEALTHCHECKUP 9,1,'-','-','-','WFCURRENTROUTELOGTABLE','-',@COUNT1,'-','-','Count on WFCURRENTROUTELOGTABLE',@SEVERITY,'Transaction Table count is high','Verify if its Normal with current system load and plan archival accordingly','-';
		END
		BEGIN TRY
			SELECT @COUNT1 = COUNT(1) FROM WFHISTORYROUTELOGTABLE WITH(NOLOCK);
		EXEC LogInsertCab 38, @v_scriptName, 'Block 38 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
			RAISERROR('Exception in block 38 ',16,1)
			EXEC LogInsertCab 38, @v_scriptName, 'Block 38 failed because WFHistoryRouteLogTable is not present', 'Failed'
		END CATCH
		SET @SEVERITY = DBO.GETSEVERITYONCOUNT(@COUNT1, 1000000, 500000, 100000);
		IF( @COUNT1 > 50000)
		BEGIN
			EXECUTE INSERTWFHEALTHCHECKUP 9,1,'-','-','-','WFHISTORYROUTELOGTABLE','-',@COUNT1,'-','-','Count on WFHISTORYROUTELOGTABLE',@SEVERITY,'Transaction Table count is high','Verify if its Normal with current system load and plan archival accordingly','-';
		END
		BEGIN TRY
			SELECT @COUNT1 = COUNT(1) FROM SUMMARYTABLE WITH(NOLOCK)
			EXEC LogInsertCab 39, @v_scriptName, 'Block 39 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
			RAISERROR('Exception in block 39 ',16,1)
			EXEC LogInsertCab 39, @v_scriptName, 'Block 39 failed because summarytable is not present', 'Failed'
		END CATCH
		SET @SEVERITY = DBO.GETSEVERITYONCOUNT(@COUNT1, 1000000, 500000, 100000);
		IF( @COUNT1 > 50000)
		BEGIN
			EXECUTE INSERTWFHEALTHCHECKUP 9,1,'-','-','-','SUMMARYTABLE','-',@COUNT1,'-','-','Count on SUMMARYTABLE',@SEVERITY,'Transaction Table count is high','Verify if its Normal with current system load and plan archival accordingly','-';
		END
		BEGIN
			BEGIN TRY
				DECLARE C_CURSOR CURSOR FOR SELECT UPPER(TABLENAME)  FROM EXTDBCONFTABLE WITH(NOLOCK) WHERE  EXTOBJID = 1;
				BEGIN
					OPEN C_CURSOR
					FETCH NEXT FROM C_CURSOR INTO @TABLENAME
						WHILE(@@FETCH_STATUS = 0)
						BEGIN
							IF  EXISTS(SELECT 1 FROM  SYSObjects WITH(NOLOCK) WHERE NAME = @TABLENAME)
							BEGIN
								SET @QUERY = N'SELECT @COUNT2 = COUNT(1) FROM ' +@TABLENAME+ ' WITH(NOLOCK)'
								SET @PARAMDEFINITION = N'@COUNT2 INT OUTPUT'
								EXEC SP_EXECUTESQL @QUERY, @PARAMDEFINITION,@COUNT2 = @COUNT2 OUTPUT
								SET @SEVERITY = DBO.GETSEVERITYONCOUNT(@COUNT1, 1000000, 500000, 100000);
								IF(@COUNT2 > 50000)
									EXECUTE INSERTWFHEALTHCHECKUP 9,1,'-','-','-',@TABLENAME,'-',@COUNT2,'-','-','Check Count',@SEVERITY,'Transaction Table count is high','Verify if its Normal with current system load and plan archival accordingly','-';
							END
							FETCH NEXT FROM C_CURSOR INTO @TABLENAME
						END
					CLOSE C_CURSOR
					DEALLOCATE C_CURSOR
				END
				EXEC LogInsertCab 40, @v_scriptName, 'Block 40 execute successfully', 'Success'
			END TRY
			BEGIN CATCH
				IF(CURSOR_STATUS('GLOBAL', 'C_CURSOR') >= -1)
				BEGIN
					IF(CURSOR_STATUS('GLOBAL', 'C_CURSOR') > -1)
					BEGIN
						CLOSE C_CURSOR
					END
					DEALLOCATE C_CURSOR
				END
				RAISERROR('Exception in block 40',16,1)
				SELECT @STEP_DETAILS = 'Block 40 failed because '+@TABLENAME+' is not present'
				EXEC LogInsertCab 40, @v_scriptName, @STEP_DETAILS, 'Failed'
			END CATCH
		END
		BEGIN TRY
			SELECT @COUNT1 = COUNT(1) FROM PDBDOCUMENT WITH(NOLOCK)
			EXEC LogInsertCab 41, @v_scriptName, 'Block 41 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
			RAISERROR('Exception in block 41 ',16,1)
			EXEC LogInsertCab 41, @v_scriptName, 'Block 41 failed because pdbdocument is not present', 'Failed'
		END CATCH
		SET @SEVERITY = DBO.GETSEVERITYONCOUNT(@COUNT1, 10000000, 5000000, 1000000);
		IF(@COUNT1 > 50000)
			EXECUTE INSERTWFHEALTHCHECKUP 9,1,'-','-','-','PDBDOCUMENT','-',@COUNT1,'-','-','Count on PDBDOCUMENT',@SEVERITY,'Transaction Table count is high','-','Please verify if the count is normal as per system usage and no custom service abnormaly adding redundandant documents.';
		BEGIN TRY
			SELECT @COUNT1 = COUNT(1) FROM PDBFOLDER WITH(NOLOCK)
			EXEC LogInsertCab 42, @v_scriptName, 'Block 42 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
			RAISERROR('Exception in block 42 ',16,1)
			EXEC LogInsertCab 42, @v_scriptName, 'Block 42 failed because pdbfolder is not present', 'Failed'
		END CATCH
		SET @SEVERITY = DBO.GETSEVERITYONCOUNT(@COUNT1, 1000000, 500000, 100000);
		IF(@COUNT1 > 50000)
			EXECUTE INSERTWFHEALTHCHECKUP 9,1,'-','-','-','PDBFOLDER','-',@COUNT1,'-','-','Count on PDBFOLDER',@SEVERITY,'-','-','Kindly review if ithe count is normal as per the product users';
		BEGIN TRY
			SELECT @COUNT1 = COUNT(1) FROM PDBNEWAUDITTRAIL_TABLE WITH(NOLOCK)
			EXEC LogInsertCab 43, @v_scriptName, 'Block 43 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
			RAISERROR('Exception in block 43 ',16,1)
			EXEC LogInsertCab 43, @v_scriptName, 'Block 43 failed because pdbnewaudittrail is not present', 'Failed'
		END CATCH
		SET @SEVERITY = DBO.GETSEVERITYONCOUNT(@COUNT1, 1000000, 500000, 100000);
		IF(@COUNT1 > 50000)
			EXECUTE INSERTWFHEALTHCHECKUP 9,1,'-','-','-','PDBNEWAUDITTRAIL_TABLE','-',@COUNT1,'-','-','Count on PDBNEWAUDITTRAIL_TABLE',@SEVERITY,'-','-','Kindly check if the older audit data can be truncated';
		BEGIN TRY
			SELECT @COUNT1 = COUNT(1) FROM WFSYSTEMVARIABLESTABLE WITH(NOLOCK) WHERE SORTFLAG='Y'
			EXEC LogInsertCab 44, @v_scriptName, 'Block 44 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
			RAISERROR('Exception in block 41 ',16,1)
			EXEC LogInsertCab 44, @v_scriptName, 'Block 44 failed because WFSYSTEMVARIABLESTABLE is not present', 'Failed'
		END CATCH
			EXECUTE INSERTWFHEALTHCHECKUP 9,1,'-','-','-','PDBNEWAUDITTRAIL_TABLE','-',@COUNT1,'-','-','Count on PDBNEWAUDITTRAIL_TABLE',@SEVERITY,'-','-','Kindly check if the older audit data can be truncated';
	END
	
	BEGIN
		DECLARE C_CURSOR CURSOR FOR SELECT TABLENAME, PROCESSDEFID FROM EXTDBCONFTABLE WITH(NOLOCK) WHERE EXTOBJID = 1
		BEGIN TRY
			OPEN C_CURSOR
			FETCH NEXT FROM C_CURSOR INTO @TABLENAME, @PROCESSDEFID
			WHILE(@@FETCH_STATUS = 0)
			BEGIN
				IF EXISTS( SELECT 1 FROM SYSOBJECTS WITH(NOLOCK) WHERE NAME = @TABLENAME)
				BEGIN 
					SET @QUERY = N'SELECT @EXTTABLEROWCOUNT = COUNT(1) FROM ' +@TABLENAME+ ' WITH(NOLOCK)'
					SET @PARAMDEFINITION = N'@EXTTABLEROWCOUNT INT OUTPUT'
					EXEC SP_EXECUTESQL @QUERY, @PARAMDEFINITION, @EXTTABLEROWCOUNT = @EXTTABLEROWCOUNT OUTPUT
					SET @SEVERITY = DBO.GETSEVERITYONTABLECOUNT(@SEVERITYLOWMINCOUNT, @SEVERITYLOWMAXCOUNT, @SEVERITYMEDIUMMINCOUNT, @SEVERITYMEDIUMMAXCOUNT, @SEVERITYHIGHMINCOUNT, @SEVERITYHIGHMAXCOUNT, @SEVERITYCRITICALMINCOUNT, @EXTTABLEROWCOUNT)
					IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WITH(NOLOCK) WHERE CONSTRAINT_TYPE = 'PRIMARY KEY' AND TABLE_NAME = @TABLENAME)
					BEGIN
						SELECT @CONSTRAINT_NAME = CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WITH(NOLOCK) WHERE CONSTRAINT_TYPE = 'PRIMARY KEY' AND TABLE_NAME = @TABLENAME
						SET @COUNT1 = 0
					END
					ELSE
					BEGIN
						SET @COUNT1 = 1
					END
					--PRINT('@COUNT1 = '+CAST(@COUNT1 AS VARCHAR)+' , @TABLENAME = '+@TABLENAME)
					IF(@COUNT1 = 0)
					BEGIN
						SET @COUNT2 = 0
						SET @COUNT3 = 0
						SET @COUNT4 = 0
						BEGIN
							SELECT @COUNT2 = COUNT(1) FROM SYS.COLUMNS C WITH(NOLOCK) INNER JOIN SYS.TYPES T WITH(NOLOCK) ON C.USER_TYPE_ID = T.USER_TYPE_ID LEFT OUTER JOIN SYS.INDEX_COLUMNS 	IC WITH(NOLOCK) ON IC.OBJECT_ID = C.OBJECT_ID AND IC.COLUMN_ID = C.COLUMN_ID LEFT OUTER JOIN SYS.INDEXES I WITH(NOLOCK) ON IC.OBJECT_ID = I.OBJECT_ID AND IC.INDEX_ID = I.INDEX_ID WHERE C.OBJECT_ID = OBJECT_ID(@TABLENAME) AND T.NAME = 'NVARCHAR' AND C.NAME = 'ITEMINDEX'
							SELECT @COUNT3 = COUNT(1) FROM SYS.COLUMNS C WITH(NOLOCK) INNER JOIN SYS.TYPES T WITH(NOLOCK) ON C.USER_TYPE_ID = T.USER_TYPE_ID LEFT OUTER JOIN SYS.INDEX_COLUMNS IC WITH(NOLOCK) ON IC.OBJECT_ID = C.OBJECT_ID AND IC.COLUMN_ID = C.COLUMN_ID LEFT OUTER JOIN SYS.INDEXES I WITH(NOLOCK) ON IC.OBJECT_ID = I.OBJECT_ID AND IC.INDEX_ID = I.INDEX_ID WHERE C.OBJECT_ID = OBJECT_ID(@TABLENAME) AND T.NAME = 'NVARCHAR' AND C.NAME = 'ITEMTYPE'
						END
						IF(@COUNT2 = 0)
						BEGIN
							EXECUTE INSERTWFHEALTHCHECKUP 10,1,'-','-','-',@TABLENAME,'ITEMINDEX','-','-','-','Datatype is not correct',@SEVERITY,'Datatype is not correct according to product recommendation','All the join queries will be slow','Correct the datatype to NVARCHAR'
						END
						IF(@COUNT3 = 0)
						BEGIN
							EXECUTE INSERTWFHEALTHCHECKUP 10,1,'-','-','-',@TABLENAME,'ITEMTYPE','-','-','-','Datatype is not correct',@SEVERITY,'Datatype is not correct according to product recommendation','All the join queries will be slow','Correct the datatype to NVARCHAR'
						END
						DECLARE C_SEARCHVARIABLE CURSOR FOR SELECT column_name ,KU.ORDINAL_POSITION FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC WITH(NOLOCK) INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KU WITH(NOLOCK) ON TC.CONSTRAINT_TYPE = 'PRIMARY KEY' AND TC.CONSTRAINT_NAME = KU.CONSTRAINT_NAME AND KU.table_name=@TABLENAME ORDER BY KU.TABLE_NAME, KU.ORDINAL_POSITION;
						BEGIN
							SET @COUNT4 = 0
							SET @COUNT5 = 0
							SET @COUNT6 = 0
							OPEN C_SEARCHVARIABLE
							FETCH NEXT FROM C_SEARCHVARIABLE INTO @COLUMNNAME,@ORDINAL_POSITION
							WHILE(@@FETCH_STATUS = 0)
							BEGIN
								IF(@COLUMNNAME = 'ITEMINDEX')
								BEGIN
									SET @COUNT4 = @COUNT4 + 1;
									
								END
								IF(@COLUMNNAME = 'ITEMTYPE' )
								BEGIN
									SET @COUNT4 = @COUNT4 + 1
								END
							FETCH NEXT FROM C_SEARCHVARIABLE INTO @COLUMNNAME,@ORDINAL_POSITION
							END
							CLOSE C_SEARCHVARIABLE
							DEALLOCATE C_SEARCHVARIABLE
						END
						IF(@COUNT4 <> 2)
						BEGIN
							EXECUTE INSERTWFHEALTHCHECKUP 10,1,'-','-','-',@TABLENAME,@COLUMNNAME,'-','-','-','Primary key is Missing',@SEVERITY,'Composite primary key is missing','All the product queries will be slow due to this','Create the missing primary key(ITEMINDEX:ITEMTYPE)'
						END
					END
					IF(@COUNT1 = 1)
					BEGIN
						EXECUTE INSERTWFHEALTHCHECKUP 10,1,'-','-','-',@TABLENAME,'ITEMINDEX:ITEMTYPE','-','-','-','Primary key is Missing',@SEVERITY,'Composite primary key is missing','All the product queries will be slow due to this','Create the missing primary key(ITEMINDEX:ITEMTYPE)'
					END
				END
				FETCH NEXT FROM C_CURSOR INTO @TABLENAME, @PROCESSDEFID
			END
			CLOSE C_CURSOR
			DEALLOCATE C_CURSOR
			EXEC LogInsertCab 30, @v_scriptName, 'Block 30 execute successfully', 'Success'
		END TRY
		--END TRY
		BEGIN CATCH
			IF(CURSOR_STATUS('GLOBAL', 'C_CURSOR') >= -1)
			BEGIN
				IF(CURSOR_STATUS('GLOBAL', 'C_CURSOR') > -1)
				BEGIN
					CLOSE C_CURSOR
				END
				DEALLOCATE C_CURSOR
			END
		RAISERROR('Exception in block 30 ',16,1)
			EXEC LogInsertCab 30, @v_scriptName, 'Block 30 failed because extdbconftable is not present', 'Failed'
		END CATCH
	END
	
		
	
	
	
	BEGIN
		BEGIN TRY
			SELECT @COUNT1 = COUNT(1) FROM PDBDOCUMENT WITH(NOLOCK) WHERE DOCUMENTTYPE = 'N' AND DOCUMENTSIZE > 5120
			IF @COUNT1 <> 0
			BEGIN
				EXECUTE INSERTWFHEALTHCHECKUP 11,1,'-','-','-','PDBDOCUMENT','-',@COUNT1,'-','-','Count on PDBDOCUMENT',1,'Documents with the size of more than 5MB found','Large documents will utilise the more network bandwidth','Keep a check on document size'
			END
			EXEC LogInsertCab 44, @v_scriptName, 'Block 44 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
			RAISERROR('Exception in block 44',16,1)
			EXEC LogInsertCab 44, @v_scriptName, 'Block 44 failed because pdbdocument is not present', 'Failed'
		END CATCH
	END
	
	
	
	BEGIN
		BEGIN TRY
			DECLARE C_SEARCHVARIABLE CURSOR FOR SELECT ACTIONID, COUNT(1) FROM WFCURRENTROUTELOGTABLE WITH(NOLOCK) WHERE ACTIONID = 23 OR ACTIONID = 24 GROUP BY ACTIONID;
			OPEN C_SEARCHVARIABLE
			FETCH NEXT FROM C_SEARCHVARIABLE INTO @ACTIONID,@COUNT1
			WHILE(@@FETCH_STATUS = 0)
			BEGIN
				IF(@ACTIONID = 23 AND @COUNT1 > 0)
				BEGIN
					EXECUTE INSERTWFHEALTHCHECKUP 12,1,'-','-','-','WFCURRENTROUTELOGTABLE',@ACTIONID,@COUNT1,'-','-','Count on WFCURRENTROUTELOGTABLE',3,'Entries of ACTIONID 23 present in the table which is not required','Size of the table will be high','Remove the entries of ActionId = 23 from WFCURRENTROUTELOGTABLE'
				END
				ELSE IF (@ACTIONID = 24 AND @COUNT1 > 0)
				BEGIN
					EXECUTE INSERTWFHEALTHCHECKUP 12,1,'-','-','-','WFCURRENTROUTELOGTABLE',@ACTIONID,@COUNT1,'-','-','Count on WFCURRENTROUTELOGTABLE',3,'Entries of ACTIONID 24 present in the table which is not required','Size of the table will be high','Remove the entries of ActionId = 24 from WFCURRENTROUTELOGTABLE'
				END
				FETCH NEXT FROM C_SEARCHVARIABLE INTO @ACTIONID,@COUNT1
			END
			CLOSE C_SEARCHVARIABLE
			DEALLOCATE C_SEARCHVARIABLE
			EXEC LogInsertCab 47, @v_scriptName, 'Block 47 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
			IF(CURSOR_STATUS('GLOBAL', 'C_SEARCHVARIABLE') >= -1)
			BEGIN
				IF(CURSOR_STATUS('GLOBAL', 'C_SEARCHVARIABLE') > -1)
				BEGIN
					CLOSE C_SEARCHVARIABLE
				END
				DEALLOCATE C_SEARCHVARIABLE
			END
			RAISERROR('Exception in block 47',16,1)
			EXEC LogInsertCab 47, @v_scriptName, 'Block 47 failed because WFCurrentRouteLogTable is not present', 'Failed'
		END CATCH
	END
	
	BEGIN
		BEGIN TRY
		IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WITH(NOLOCK) WHERE  TABLE_NAME = 'PROCESSDEFTABLE' AND COLUMN_NAME = 'THRESHOLDROUTINGCOUNT') 
		BEGIN
			SET @QUERY = N'SET @CURSOR_DYNAMIC = CURSOR FAST_FORWARD FOR SELECT PROCESSDEFID, THRESHOLDROUTINGCOUNT, PROCESSNAME FROM PROCESSDEFTABLE WITH(NOLOCK); OPEN @CURSOR_DYNAMIC;'
			SET @PARAMDEFINITION = N'@CURSOR_DYNAMIC CURSOR OUTPUT'
			BEGIN TRY
				EXECUTE SP_EXECUTESQL @QUERY, @PARAMDEFINITION ,@CURSOR_DYNAMIC = @CURSOR_DYNAMIC OUTPUT
			END TRY
			BEGIN CATCH
				CLOSE @CURSOR_DYNAMIC
				DEALLOCATE @CURSOR_DYNAMIC
				RETURN
			END CATCH
			FETCH NEXT FROM @CURSOR_DYNAMIC INTO @PROCESSDEFID,@THRESHOLDROUTINGCOUNT, @PROCESSNAME
			WHILE(@@FETCH_STATUS = 0)
			BEGIN
				BEGIN TRY
					SELECT @COUNT1 = COUNT(1) FROM ACTIVITYTABLE WTIH(NOLOCK) WHERE PROCESSDEFID = @PROCESSDEFID
				END TRY
				BEGIN CATCH
					RAISERROR('Exception in block 51',16,1)
					SELECT @STEP_DETAILS = 'Block 51 failed because no entry present for the processdefid '+CAST(@PROCESSDEFID AS VARCHAR)+'    in activitytable'
					EXEC LogInsertCab 51, @v_scriptName, @STEP_DETAILS, 'Failed'
				END CATCH
				IF((@COUNT1*10) < @THRESHOLDROUTINGCOUNT)
				BEGIN
					SET @THRESHOLDMAXCOUNT = @COUNT1*10
					EXECUTE INSERTWFHEALTHCHECKUP 13,1,@PROCESSNAME,'-','-',@PROCESSDEFID,@COUNT1,@THRESHOLDROUTINGCOUNT,'-','-','Check the thresholdroutingcount',2,'May lead to high CPU if the workitem is stuck in a loop','Too much routing increase the workflow or audit size count','Correct the thresholdroutingcount to the max of ten times the number of activities in the process'
				END
				FETCH NEXT FROM @CURSOR_DYNAMIC INTO @PROCESSDEFID,@THRESHOLDROUTINGCOUNT, @PROCESSNAME
			
			END
			CLOSE @CURSOR_DYNAMIC
			DEALLOCATE @CURSOR_DYNAMIC
			EXEC LogInsertCab 52, @v_scriptName, 'Block 52 execute successfully', 'Success'
		END
		END TRY
		BEGIN CATCH
			IF(CURSOR_STATUS('GLOBAL', '@CURSOR_DYNAMIC') >= -1)
			BEGIN
				IF(CURSOR_STATUS('GLOBAL', '@CURSOR_DYNAMIC') > -1)
				BEGIN
					CLOSE @CURSOR_DYNAMIC
				END
				DEALLOCATE @CURSOR_DYNAMIC
			END
			RAISERROR('Exception in block 52 ',16,1)
			EXEC LogInsertCab 52, @v_scriptName, 'Block 52 failed because Processdeftable is not present', 'Failed'
		END CATCH
	END
	
	BEGIN
		BEGIN TRY
			SELECT @TOTALNOOFDAYS1 = DATEDIFF(DAY, CREATEDON, GETDATE()) FROM PROCESSDEFTABLE WITH(NOLOCK) WHERE PROCESSDEFID = (SELECT MIN(PROCESSDEFID) FROM PROCESSDEFTABLE WITH(NOLOCK))
			DECLARE C_SEARCHVARIABLE CURSOR FOR SELECT TABLE_NAME, COLUMN_NAME FROM WFHEALTHSTOREIDENTITY WITH(NOLOCK)
			OPEN C_SEARCHVARIABLE
			FETCH NEXT FROM C_SEARCHVARIABLE INTO @TABLENAME, @COLUMNNAME
			WHILE(@@FETCH_STATUS = 0)
			BEGIN
				IF (EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WITH(NOLOCK) WHERE TABLE_NAME = @TABLENAME AND COLUMN_NAME = @COLUMNNAME ))
				BEGIN
					SELECT @DATATYPE = DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WITH(NOLOCK) WHERE TABLE_NAME = @TABLENAME AND COLUMN_NAME = @COLUMNNAME
					IF(UPPER(@DATATYPE) = 'INT')
					BEGIN
						SET @LIMIT = 2147483647
						--SET @LIMIT = 4000
					END
					ELSE IF(UPPER(@DATATYPE) = 'BIGINT')
					BEGIN
						SET @LIMIT = 9223372036854775807
						--SET @LIMIT = 4000
					END
					SET @QUERY = N'SELECT @COUNT_MAX = MAX('+@COLUMNNAME+') FROM '+@TABLENAME+ ' with(nolock)'
					SET @PARAMDEFINITION = N' @COUNT_MAX BIGINT OUTPUT'
					EXECUTE SP_EXECUTESQL @QUERY, @PARAMDEFINITION, @COUNT_MAX = @COUNT_MAX OUTPUT
					IF(@COUNT_MAX > 0)
					BEGIN
						SET @VALUE = CAST(CAST(@COUNT_MAX AS DECIMAL(25, 5))/CAST(@LIMIT  AS DECIMAL(25, 5)) AS DECIMAL(25, 7))* 100
						SET @REMAININGPERCENTAGE = 100 - @VALUE
						--PRINT('@VALUE : '+CAST(@VALUE AS VARCHAR))
						IF(@VALUE > 0)
						BEGIN
							SET @TOTALNOOFDAYS2 = ((@TOTALNOOFDAYS1 * 100)/@VALUE)
							SET @REMAININGDAYS = (@REMAININGPERCENTAGE * @TOTALNOOFDAYS2 )/ 100;
							IF(@REMAININGDAYS < 180)
							BEGIN
								EXECUTE INSERTWFHEALTHIDENTITYCOLUMN 14, 1, @TABLENAME, @COLUMNNAME, @DATATYPE, @LIMIT, @COUNT_MAX, @VALUE, 3
							END
							ELSE IF((@REMAININGDAYS > 180 AND @REMAININGDAYS < 400) OR @REMAININGPERCENTAGE <= 20)
							BEGIN
								EXECUTE INSERTWFHEALTHIDENTITYCOLUMN 14, 1, @TABLENAME, @COLUMNNAME, @DATATYPE, @LIMIT, @COUNT_MAX, @VALUE, 2
							END
						END
					END
				END
				FETCH NEXT FROM C_SEARCHVARIABLE INTO @TABLENAME, @COLUMNNAME
			END
			CLOSE C_SEARCHVARIABLE
			DEALLOCATE C_SEARCHVARIABLE
			EXEC LogInsertCab 53, @v_scriptName, 'Block 53 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
			IF(CURSOR_STATUS('GLOBAL', 'C_SEARCHVARIABLE') >= -1)
			BEGIN
				IF(CURSOR_STATUS('GLOBAL', 'C_SEARCHVARIABLE') > -1)
				BEGIN
					CLOSE C_SEARCHVARIABLE
				END
				DEALLOCATE C_SEARCHVARIABLE
			END
			PRINT(ERROR_MESSAGE())
			RAISERROR('Exception in block 53 ',16,1)
			EXEC LogInsertCab 53, @v_scriptName, 'Block 53 failed', 'Failed'
		END CATCH
	END
	
	BEGIN
		BEGIN TRY
			DECLARE C_SEARCHVARIABLE CURSOR FOR  SELECT TABLENAME,PROCESSDEFID FROM EXTDBCONFTABLE WITH(NOLOCK) WHERE SORTINGCOLUMN IS NOT NULL AND SORTINGCOLUMN <> '' AND EXTOBJID > 1;
			OPEN C_SEARCHVARIABLE
			FETCH NEXT FROM C_SEARCHVARIABLE INTO @TABLENAME,@PROCESSDEFID
			WHILE(@@FETCH_STATUS = 0)
			BEGIN
				--PRINT('INSERTIONORDERID')
				IF EXISTS(SELECT 1 FROM SYSOBJECTS WITH(NOLOCK) WHERE NAME = @TABLENAME)
				BEGIN
					SET @PROCESSNAME = DBO.FETCHPROCESSNAME(@PROCESSDEFID)
					EXECUTE CHECKINDEXBYORDEREDCOLNAMES @TABLENAME,'INSERTIONORDERID',@CHECKNUMBER OUTPUT
					IF(@CHECKNUMBER = 0)
					BEGIN
						SET @QUERY = N'SELECT @EXTTABLEROWCOUNT = COUNT(1) FROM ' +@TABLENAME+ ' WITH(NOLOCK)'
						SET @PARAMDEFINITION = N'@EXTTABLEROWCOUNT INT OUTPUT'
						EXEC SP_EXECUTESQL @QUERY, @PARAMDEFINITION, @EXTTABLEROWCOUNT = @EXTTABLEROWCOUNT OUTPUT
						SET @SEVERITY = DBO.GETSEVERITYONTABLECOUNT(@SEVERITYLOWMINCOUNT, @SEVERITYLOWMAXCOUNT, @SEVERITYMEDIUMMINCOUNT, @SEVERITYMEDIUMMAXCOUNT, @SEVERITYHIGHMINCOUNT, @SEVERITYHIGHMAXCOUNT, @SEVERITYCRITICALMINCOUNT, @EXTTABLEROWCOUNT)
						EXECUTE INSERTWFHEALTHCHECKUP 15,1,@PROCESSNAME,'-','-',@TABLENAME,'INSERTIONORDERID','-','-',@PROCESSDEFID,'Index is missing',@SEVERITY,'Index on sorting column of complex table is missing','Displaying data on form from complex table will be slow','Create the missing index'
					END
					SELECT @COUNT1 = COLUMNPROPERTY(OBJECT_ID(@TABLENAME), 'INSERTIONORDERID', 'ISIDENTITY')
					IF(@COUNT1 = 0)
					BEGIN
						SET @QUERY = N'SELECT @EXTTABLEROWCOUNT = COUNT(1) FROM ' +@TABLENAME+ ' WITH(NOLOCK)'
						SET @PARAMDEFINITION = N'@EXTTABLEROWCOUNT INT OUTPUT'
						EXEC SP_EXECUTESQL @QUERY, @PARAMDEFINITION, @EXTTABLEROWCOUNT = @EXTTABLEROWCOUNT OUTPUT
						SET @SEVERITY = DBO.GETSEVERITYONTABLECOUNT(@SEVERITYLOWMINCOUNT, @SEVERITYLOWMAXCOUNT, @SEVERITYMEDIUMMINCOUNT, @SEVERITYMEDIUMMAXCOUNT, @SEVERITYHIGHMINCOUNT, @SEVERITYHIGHMAXCOUNT, @SEVERITYCRITICALMINCOUNT, @EXTTABLEROWCOUNT)
						EXECUTE INSERTWFHEALTHCHECKUP 15,1,@PROCESSNAME,'-','-',@TABLENAME,'INSERTIONORDERID','-','-',@PROCESSDEFID,'Column is not identity',3,'Column is not created as identity','Displaying data on form from complex table will be slow','Create the identity on the column'
					END
				END
				FETCH NEXT FROM C_SEARCHVARIABLE INTO @TABLENAME,@PROCESSDEFID
			END
			CLOSE C_SEARCHVARIABLE
			DEALLOCATE C_SEARCHVARIABLE
			EXEC LogInsertCab 45, @v_scriptName, 'Block 45 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
			IF(CURSOR_STATUS('GLOBAL', 'C_SEARCHVARIABLE') >= -1)
			BEGIN
				IF(CURSOR_STATUS('GLOBAL', 'C_SEARCHVARIABLE') > -1)
				BEGIN
					CLOSE C_SEARCHVARIABLE
				END
				DEALLOCATE C_SEARCHVARIABLE
			END
			RAISERROR('Exception in block 45',16,1)
			EXEC LogInsertCab 45, @v_scriptName, 'Block 45 failed because extdbconftable is not present', 'Failed'
		END CATCH
	END
	BEGIN
		BEGIN TRY
			DECLARE C_SEARCHVARIABLE CURSOR FOR SELECT PARENTOBJECT,FOREIGNKEY,CHILDOBJECT,REFKEY,PROCESSDEFID FROM WFVARRELATIONTABLE WITH(NOLOCK)
			OPEN C_SEARCHVARIABLE
			FETCH NEXT FROM C_SEARCHVARIABLE INTO @PARENTOBJECT,@FOREIGNKEY,@CHILDOBJECT,@REFKEY,@PROCESSDEFID
			WHILE(@@FETCH_STATUS = 0)
			BEGIN
				SET @PROCESSNAME = DBO.FETCHPROCESSNAME(@PROCESSDEFID)
				BEGIN
					EXECUTE CHECKINDEXBYORDEREDCOLNAMES @PARENTOBJECT,@FOREIGNKEY,@CHECKNUMBER OUTPUT
					IF(@CHECKNUMBER = 0)
					BEGIN
						SET @QUERY = N'SELECT @EXTTABLEROWCOUNT = COUNT(1) FROM ' +@PARENTOBJECT+ ' WITH(NOLOCK)'
						SET @PARAMDEFINITION = N'@EXTTABLEROWCOUNT INT OUTPUT'
						EXEC SP_EXECUTESQL @QUERY, @PARAMDEFINITION, @EXTTABLEROWCOUNT = @EXTTABLEROWCOUNT OUTPUT
						SET @SEVERITY = DBO.GETSEVERITYONTABLECOUNT(@SEVERITYLOWMINCOUNT, @SEVERITYLOWMAXCOUNT, @SEVERITYMEDIUMMINCOUNT, @SEVERITYMEDIUMMAXCOUNT, @SEVERITYHIGHMINCOUNT, @SEVERITYHIGHMAXCOUNT, @SEVERITYCRITICALMINCOUNT, @EXTTABLEROWCOUNT)
						EXECUTE INSERTWFHEALTHCHECKUP 15,1,@PROCESSNAME,'-','-',@PARENTOBJECT,@FOREIGNKEY,'-','-',@PROCESSDEFID,'Index is missing',@SEVERITY,'Index on sorting column of complex table is missing','Displaying data on form from complex table will be slow','Create the missing index'
					END
					IF EXISTS(SELECT 1 FROM SYSObjects WITH(NOLOCK) WHERE NAME = @CHILDOBJECT)
					BEGIN
						EXECUTE CHECKINDEXBYORDEREDCOLNAMES @CHILDOBJECT,@REFKEY,@CHECKNUMBER OUTPUT
						IF(@CHECKNUMBER = 0)
						BEGIN
						SET @QUERY = N'SELECT @EXTTABLEROWCOUNT = COUNT(1) FROM ' +@CHILDOBJECT+ ' WITH(NOLOCK)'
						SET @PARAMDEFINITION = N'@EXTTABLEROWCOUNT INT OUTPUT'
						EXEC SP_EXECUTESQL @QUERY, @PARAMDEFINITION, @EXTTABLEROWCOUNT = @EXTTABLEROWCOUNT OUTPUT
						SET @SEVERITY = DBO.GETSEVERITYONTABLECOUNT(@SEVERITYLOWMINCOUNT, @SEVERITYLOWMAXCOUNT, @SEVERITYMEDIUMMINCOUNT, @SEVERITYMEDIUMMAXCOUNT, @SEVERITYHIGHMINCOUNT, @SEVERITYHIGHMAXCOUNT, @SEVERITYCRITICALMINCOUNT, @EXTTABLEROWCOUNT)
							EXECUTE INSERTWFHEALTHCHECKUP 15,1,@PROCESSNAME,'-','-',@CHILDOBJECT,@REFKEY,'-','-',@PROCESSDEFID,'Index missing for for complex relation column',@SEVERITY,'Index missing for for complex relation column','All the table fetching or updating data in this table will be slow','Create the missing index'
						END
					END
					SELECT @DATATYPE1 = T.NAME FROM SYS.COLUMNS C WITH(NOLOCK) JOIN SYS.TYPES T WITH(NOLOCK) ON C.USER_TYPE_ID = T.USER_TYPE_ID	WHERE C.OBJECT_ID    = OBJECT_ID(@PARENTOBJECT) AND C.NAME = @FOREIGNKEY
					SELECT @DATATYPE2 = T.NAME FROM SYS.COLUMNS C WITH(NOLOCK) JOIN SYS.TYPES T WITH(NOLOCK) ON C.USER_TYPE_ID = T.USER_TYPE_ID WHERE C.OBJECT_ID    = OBJECT_ID(@CHILDOBJECT) AND C.NAME = @REFKEY
					SET @PRINTDATA1 = 'Correct the datatype of the mismatch columns to '+@DATATYPE1
					IF(@DATATYPE1 <> @DATATYPE2)
					BEGIN
						SET @QUERY = N'SELECT @EXTTABLEROWCOUNT = COUNT(1) FROM ' +@CHILDOBJECT+ ' WITH(NOLOCK)'
						SET @PARAMDEFINITION = N'@EXTTABLEROWCOUNT INT OUTPUT'
						EXEC SP_EXECUTESQL @QUERY, @PARAMDEFINITION, @EXTTABLEROWCOUNT = @EXTTABLEROWCOUNT OUTPUT
						SET @SEVERITY = DBO.GETSEVERITYONTABLECOUNT(@SEVERITYLOWMINCOUNT, @SEVERITYLOWMAXCOUNT, @SEVERITYMEDIUMMINCOUNT, @SEVERITYMEDIUMMAXCOUNT, @SEVERITYHIGHMINCOUNT, @SEVERITYHIGHMAXCOUNT, @SEVERITYCRITICALMINCOUNT, @EXTTABLEROWCOUNT)
						EXECUTE INSERTWFHEALTHCHECKUP 15,1,@PROCESSNAME,'-','-',@CHILDOBJECT,@REFKEY,@COUNT1,'-',@PROCESSDEFID,'DataType is mismatch',@SEVERITY,'Datatype is mismatch between complex mapping column','All the table fetching or updating data in this table will be slow',@PRINTDATA1
					END
				END
				FETCH NEXT FROM C_SEARCHVARIABLE INTO @PARENTOBJECT,@FOREIGNKEY,@CHILDOBJECT,@REFKEY,@PROCESSDEFID
			END
			CLOSE C_SEARCHVARIABLE
			DEALLOCATE C_SEARCHVARIABLE
			EXEC LogInsertCab 46, @v_scriptName, 'Block 46 execute successfully', 'Success'
		END TRY
		BEGIN CATCH
		SET @ERRORMESSAGE = 'Exception in block 46. ' + ERROR_MESSAGE()
			IF(CURSOR_STATUS('GLOBAL', 'C_SEARCHVARIABLE') >= -1)
			BEGIN
				IF(CURSOR_STATUS('GLOBAL', 'C_SEARCHVARIABLE') > -1)
				BEGIN
					CLOSE C_SEARCHVARIABLE
				END
				DEALLOCATE C_SEARCHVARIABLE
			END
			RAISERROR(@ERRORMESSAGE,16,1)
			EXEC LogInsertCab 46, @v_scriptName, 'Block 46 failed because WFVarRelationTable is not present', 'Failed'
		END CATCH
	END
	
	
	
	
	
	
	
	BEGIN
		DECLARE C_ORDERBYCOLUMN CURSOR FOR SELECT DISTINCT QUEUEID, QUEUENAME, ORDERBY FROM QUEUEDEFTABLE WITH(NOLOCK)
		BEGIN TRY
			OPEN C_ORDERBYCOLUMN
			FETCH NEXT FROM C_ORDERBYCOLUMN INTO @QUEUEID, @QUEUENAME, @ORDERBY
			WHILE(@@FETCH_STATUS = 0)
			BEGIN
				SET @COLUMNNAME = DBO.GETORDERBYCOLUMNNAME(@ORDERBY)
				--PRINT('@ORDERBY :' +CAST(@ORDERBY AS VARCHAR))
				--PRINT('@columnname : ' +@COLUMNNAME)
				IF(@ORDERBY <= 20)
				BEGIN
					SELECT @COUNT1 = COUNT(1) FROM ##TEMPCHECKCOLUMNEXIST WITH(NOLOCK) WHERE COLUMN_NAME = @COLUMNNAME
					IF(@COUNT1 = 0)
					BEGIN
						INSERT INTO ##TEMPCHECKCOLUMNEXIST(COLUMN_NAME) VALUES(@COLUMNNAME)
						SET @ORDERAPPENDVARIABLE = 'Q_QUEUEID:'+@COLUMNNAME+':ROUTINGSTATUS:LOCKSTATUS' 
						--SET @EXTENDEDVARIABLE = 'Q_QUEUEID:'+@COLUMNNAME 
						EXECUTE CHECKINDEXONORDERCOLUMN 'WFINSTRUMENTTABLE', @COLUMNNAME, @CHECKNUMBER OUTPUT
						--EXECUTE CHECKINDEXBYORDEREDCOLNAMES 'WFINSTRUMENTTABLE',@COLUMNNAME,@CHECKNUMBER OUTPUT
						SET @SEARCHAPPENDVARIABLE = 'This column '+@COLUMNNAME+' has been used as an order by on a Queue'
						SET @PRINTDATA1 = 'Create the missing index like '+@ORDERAPPENDVARIABLE
						IF(@CHECKNUMBER = 0)
						BEGIN
							SET @QUERY = N'SELECT @EXTTABLEROWCOUNT = COUNT(1) FROM WFINSTRUMENTTABLE WITH(NOLOCK)'
							SET @PARAMDEFINITION = N'@EXTTABLEROWCOUNT INT OUTPUT'
							EXEC SP_EXECUTESQL @QUERY, @PARAMDEFINITION, @EXTTABLEROWCOUNT = @EXTTABLEROWCOUNT OUTPUT
							SET @SEVERITY = DBO.GETSEVERITYONTABLECOUNT(@SEVERITYLOWMINCOUNT, @SEVERITYLOWMAXCOUNT, @SEVERITYMEDIUMMINCOUNT, @SEVERITYMEDIUMMAXCOUNT, @SEVERITYHIGHMINCOUNT, @SEVERITYHIGHMAXCOUNT, @SEVERITYCRITICALMINCOUNT, @EXTTABLEROWCOUNT)
							EXECUTE INSERTWFHEALTHCHECKUP 16,1,'-','-',@QUEUENAME,@QUEUEID,'WFINSTRUMENTTABLE',@COLUMNNAME,'-','-','Index is Missing',@SEVERITY,@SEARCHAPPENDVARIABLE,'Queue click and batching will be slow',@PRINTDATA1
						END
					END
				END
				ELSE IF(@ORDERBY > 100)
				BEGIN
					SET @ORDERBY = @ORDERBY - 100
					BEGIN TRY
						SELECT DISTINCT @SYSTEMDEFINEDNAME = SYSTEMDEFINEDNAME FROM VARMAPPINGTABLE WITH(NOLOCK) WHERE VARIABLEID = @ORDERBY AND USERDEFINEDNAME IS NOT NULL 
					END TRY
					BEGIN CATCH
						RAISERROR('Exception in block 28 ',16,1)
						SELECT @STEP_DETAILS = 'Block 28 failed because systemdefindedname  is not present for variableid '+CAST(@ORDERBY AS VARCHAR)
						EXEC LogInsertCab 28, @v_scriptName, @STEP_DETAILS, 'Failed'
					END CATCH
					SELECT @COUNT1 = COUNT(1) FROM ##TEMPCHECKCOLUMNEXIST WITH(NOLOCK) WHERE COLUMN_NAME = @SYSTEMDEFINEDNAME
					IF(@COUNT1 = 0)
					BEGIN
						INSERT INTO ##TEMPCHECKCOLUMNEXIST(COLUMN_NAME) VALUES(@SYSTEMDEFINEDNAME)
						SET @ORDERAPPENDVARIABLE = 'Q_QUEUEID:'+@SYSTEMDEFINEDNAME+':ROUTINGSTATUS:LOCKSTATUS' 
						--SET @EXTENDEDVARIABLE = 'Q_QUEUEID:'+@SYSTEMDEFINEDNAME 
						EXECUTE CHECKINDEXONORDERCOLUMN 'WFINSTRUMENTTABLE', @SYSTEMDEFINEDNAME, @CHECKNUMBER OUTPUT
						--EXECUTE CHECKINDEXBYORDEREDCOLNAMES 'WFINSTRUMENTTABLE',@COLUMNNAME,@CHECKNUMBER OUTPUT
						SET @SEARCHAPPENDVARIABLE = 'This column '+@SYSTEMDEFINEDNAME+' has been used as an order by on a Queue'
						SET @PRINTDATA1 = 'Create the missing index like '+@ORDERAPPENDVARIABLE
						--EXECUTE CHECKINDEXBYORDEREDCOLNAMES 'WFINSTRUMENTTABLE',@SYSTEMDEFINEDNAME,@CHECKNUMBER OUTPUT
						IF(@CHECKNUMBER = 0)
						BEGIN
							SET @QUERY = N'SELECT @EXTTABLEROWCOUNT = COUNT(1) FROM WFINSTRUMENTTABLE WITH(NOLOCK)'
							SET @PARAMDEFINITION = N'@EXTTABLEROWCOUNT INT OUTPUT'
							EXEC SP_EXECUTESQL @QUERY, @PARAMDEFINITION, @EXTTABLEROWCOUNT = @EXTTABLEROWCOUNT OUTPUT
							SET @SEVERITY = DBO.GETSEVERITYONTABLECOUNT(@SEVERITYLOWMINCOUNT, @SEVERITYLOWMAXCOUNT, @SEVERITYMEDIUMMINCOUNT, @SEVERITYMEDIUMMAXCOUNT, @SEVERITYHIGHMINCOUNT, @SEVERITYHIGHMAXCOUNT, @SEVERITYCRITICALMINCOUNT, @EXTTABLEROWCOUNT)
							EXECUTE INSERTWFHEALTHCHECKUP 16,1,'-','-',@QUEUENAME,@QUEUEID,'WFINSTRUMENTTABLE',@SYSTEMDEFINEDNAME,'-','-','Index is Missing',@SEVERITY,@SEARCHAPPENDVARIABLE,'Queue click and batching will be slow',@PRINTDATA1
						END
					END
				END
				FETCH NEXT FROM C_ORDERBYCOLUMN INTO @QUEUEID, @QUEUENAME, @ORDERBY
			END
			CLOSE C_ORDERBYCOLUMN
			DEALLOCATE C_ORDERBYCOLUMN
				EXEC LogInsertCab 29, @v_scriptName, 'Block 29 execute successfully', 'Success'
			END TRY
			BEGIN CATCH
				IF(CURSOR_STATUS('GLOBAL', 'C_ORDERBYCOLUMN') >= -1)
				BEGIN
					IF(CURSOR_STATUS('GLOBAL', 'C_ORDERBYCOLUMN') > -1)
					BEGIN
						CLOSE C_ORDERBYCOLUMN
					END
					DEALLOCATE C_ORDERBYCOLUMN
				END
				RAISERROR('Exception in block 29 ',16,1)
				EXEC LogInsertCab 29, @v_scriptName, 'Block 29 failed because QueueDefTable is not present', 'Failed'
			END CATCH
	END
	BEGIN
		/** Block for last 30 days data*/
		BEGIN
			SELECT @COUNT1 = 0
			SELECT @COUNT1 = COUNT(1) FROM PDBDOCUMENT WITH(NOLOCK) WHERE CreatedDateTime > ( GETDATE() - 30) AND DOCUMENTSIZE > 5120
			EXECUTE INSERTWFHEALTHCHECKUP 17,1,'-','-','-','Number of Documents added having size more than 5 mb','-',@COUNT1,'-','-','Count on PDBDOCUMENT','-','-','-','-'
		END
		BEGIN
			SELECT @COUNT1 = 0
			SELECT @COUNT1 = COUNT(1) FROM PDBFOLDER WITH(NOLOCK) WHERE CreatedDateTime > ( GETDATE() - 30);
			EXECUTE INSERTWFHEALTHCHECKUP 17,1,'-','-','-','Number of Folder added','-',@COUNT1,'-','-','Count on PDBFOLDER','-','-','-','-'
		END
		BEGIN
			SELECT @COUNT1 = 0
			SELECT @COUNT1 = COUNT(1) FROM WFINSTRUMENTTABLE WITH(NOLOCK) WHERE ENTRYDATETIME > ( GETDATE() - 30)
			EXECUTE INSERTWFHEALTHCHECKUP 17,1,'-','-','-','Number of Workitems Created','-',@COUNT1,'-','-','Count on Workitem','-','-','-','-'
		END
		BEGIN 
			SELECT @COUNT1 = 0
			SELECT @COUNT1 = COUNT(1) FROM PDBConnectionAuditTrail WHERE "DATETIME" > (GetDATE()-30) AND ACTIONID=694
			EXECUTE INSERTWFHEALTHCHECKUP 17,1,'-','-','-','Number of Failed Login attempts due to license limit exceed','-',@COUNT1,'-','-','Count on Failed Login','-','-','-','-'
		END
		BEGIN 
			SELECT @COUNT1 = 0
			SELECT @COUNT1 = SUM(CAST(DocumentSize AS BIGINT))/(1024*1024*1024) FROM PDBDocument where CREATEDDATETIME > (GETDATE()-30)
			EXECUTE INSERTWFHEALTHCHECKUP 17,1,'-','-','-','Cumulative size of the documents added in last 30 days','-',@COUNT1,'-','-','Cumulative size of the documents added in last 30 days','-','-','-','-'
		END
	END
	BEGIN
		DECLARE C_ORDERBYCOLUMN CURSOR FOR SELECT DISTINCT VAT.PARAM1, VAT.QUEUEID, QDT.QUEUENAME FROM VARALIASTABLE VAT WITH(NOLOCK), QUEUEDEFTABLE QDT WITH(NOLOCK), VARMAPPINGTABLE VMP WITH(NOLOCK) WHERE VAT.QUEUEID = QDT.QUEUEID AND VAT.Param1 = VMP.SystemDefinedName AND VMP.ExtObjId = 0
		BEGIN TRY
			OPEN C_ORDERBYCOLUMN
			FETCH NEXT FROM C_ORDERBYCOLUMN INTO @PARAM1, @QUEUEID, @QUEUENAME
			WHILE(@@FETCH_STATUS = 0)
			BEGIN
				--SET @COLUMNNAME = DBO.GETORDERBYCOLUMNNAME(@ORDERBY)
				--PRINT('@ORDERBY :' +CAST(@ORDERBY AS VARCHAR))
				--PRINT('@columnname : ' +@COLUMNNAME)
					
					SELECT @COUNT1 = COUNT(1) FROM ##TEMPCHECKCOLUMNEXIST WITH(NOLOCK) WHERE COLUMN_NAME = @PARAM1
					IF(@COUNT1 = 0)
					BEGIN
						INSERT INTO ##TEMPCHECKCOLUMNEXIST(COLUMN_NAME) VALUES(@PARAM1)
						SET @ORDERAPPENDVARIABLE = 'Q_QUEUEID:'+@PARAM1+':ROUTINGSTATUS:LOCKSTATUS' 
						--SET @EXTENDEDVARIABLE = 'Q_QUEUEID:'+@PARAM1
						EXECUTE CHECKINDEXONORDERCOLUMN 'WFINSTRUMENTTABLE', @PARAM1, @CHECKNUMBER OUTPUT
						SET @SEARCHAPPENDVARIABLE = 'The column '+@PARAM1+' used in alias'
						SET @PRINTDATA1 = 'Create the missing index like '+@ORDERAPPENDVARIABLE
						--EXECUTE CHECKINDEXBYORDEREDCOLNAMES 'WFINSTRUMENTTABLE',@COLUMNNAME,@CHECKNUMBER OUTPUT
						IF(@CHECKNUMBER = 0)
						BEGIN
							SET @QUERY = N'SELECT @EXTTABLEROWCOUNT = COUNT(1) FROM WFINSTRUMENTTABLE WITH(NOLOCK)'
							SET @PARAMDEFINITION = N'@EXTTABLEROWCOUNT INT OUTPUT'
							EXEC SP_EXECUTESQL @QUERY, @PARAMDEFINITION, @EXTTABLEROWCOUNT = @EXTTABLEROWCOUNT OUTPUT
							SET @SEVERITY = DBO.GETSEVERITYONTABLECOUNT(@SEVERITYLOWMINCOUNT, @SEVERITYLOWMAXCOUNT, @SEVERITYMEDIUMMINCOUNT, @SEVERITYMEDIUMMAXCOUNT, @SEVERITYHIGHMINCOUNT, @SEVERITYHIGHMAXCOUNT, @SEVERITYCRITICALMINCOUNT, @EXTTABLEROWCOUNT)
							EXECUTE INSERTWFHEALTHCHECKUP 16,1,'-','-',@QUEUENAME,@QUEUEID,'WFINSTRUMENTTABLE',@PARAM1,'-','-','Index is Missing',@SEVERITY,@SEARCHAPPENDVARIABLE,'Queue click and batching will be slow',@PRINTDATA1
						END
					END
				FETCH NEXT FROM C_ORDERBYCOLUMN INTO @PARAM1, @QUEUEID, @QUEUENAME
			END
			CLOSE C_ORDERBYCOLUMN
			DEALLOCATE C_ORDERBYCOLUMN
				EXEC LogInsertCab 29, @v_scriptName, 'Block 29 execute successfully', 'Success'
			END TRY
			BEGIN CATCH
			SET @ERRORMESSAGE = ERROR_MESSAGE()
				IF(CURSOR_STATUS('GLOBAL', 'C_ORDERBYCOLUMN') >= -1)
				BEGIN
					IF(CURSOR_STATUS('GLOBAL', 'C_ORDERBYCOLUMN') > -1)
					BEGIN
						CLOSE C_ORDERBYCOLUMN
					END
					DEALLOCATE C_ORDERBYCOLUMN
				END
				--RAISERROR('Exception in block 29 ',16,1)
				RAISERROR(@ERRORMESSAGE,16,1)
				EXEC LogInsertCab 29, @v_scriptName, 'Block 29 failed because QueueDefTable is not present', 'Failed'
			END CATCH
	END
 
	END
	
	GO

	--EXECUTE WFHEALTHCHECKUP

